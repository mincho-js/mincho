diff --git a/index.d.ts b/index.d.ts
index b466d21a217899260574073f9c45ea1e31457b43..f39514bce68b27e2c3144717c8699f88c0edf79d 100644
--- a/index.d.ts
+++ b/index.d.ts
@@ -1,5 +1,7 @@
 export {};
 
+export type NonNullableString = Omit<string & NonNullable<unknown>, keyof string>;
+
 export type PropertyValue<TValue> = TValue extends Array<infer AValue>
   ? Array<AValue extends infer TUnpacked & {} ? TUnpacked : AValue>
   : TValue extends infer TUnpacked & {}
@@ -8,7 +10,7 @@ export type PropertyValue<TValue> = TValue extends Array<infer AValue>
 
 export type Fallback<T> = { [P in keyof T]: T[P] | readonly NonNullable<T[P]>[] };
 
-export interface StandardLonghandProperties<TLength = (string & {}) | 0, TTime = string & {}> {
+export interface StandardLonghandProperties<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
   /**
    * The **`accent-color`** CSS property sets the accent color for user-interface controls generated by some elements.
    *
@@ -5282,7 +5284,7 @@ export interface StandardLonghandProperties<TLength = (string & {}) | 0, TTime =
   zoom?: Property.Zoom | undefined;
 }
 
-export interface StandardShorthandProperties<TLength = (string & {}) | 0, TTime = string & {}> {
+export interface StandardShorthandProperties<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
   /**
    * The **`all`** shorthand CSS property resets all of an element's properties except `unicode-bidi`, `direction`, and CSS Custom Properties. It can set properties to their initial or inherited values, or to the values specified in another cascade layer or stylesheet origin.
    *
@@ -6108,11 +6110,11 @@ export interface StandardShorthandProperties<TLength = (string & {}) | 0, TTime
   viewTimeline?: Property.ViewTimeline | undefined;
 }
 
-export interface StandardProperties<TLength = (string & {}) | 0, TTime = string & {}>
+export interface StandardProperties<TLength = (NonNullableString) | 0, TTime = NonNullableString>
   extends StandardLonghandProperties<TLength, TTime>,
     StandardShorthandProperties<TLength, TTime> {}
 
-export interface VendorLonghandProperties<TLength = (string & {}) | 0, TTime = string & {}> {
+export interface VendorLonghandProperties<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
   /**
    * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.
    *
@@ -7867,7 +7869,7 @@ export interface VendorLonghandProperties<TLength = (string & {}) | 0, TTime = s
   WebkitWritingMode?: Property.WritingMode | undefined;
 }
 
-export interface VendorShorthandProperties<TLength = (string & {}) | 0, TTime = string & {}> {
+export interface VendorShorthandProperties<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
   /**
    * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.
    *
@@ -8020,9 +8022,9 @@ export interface VendorShorthandProperties<TLength = (string & {}) | 0, TTime =
   WebkitTransition?: Property.Transition<TTime> | undefined;
 }
 
-export interface VendorProperties<TLength = (string & {}) | 0, TTime = string & {}> extends VendorLonghandProperties<TLength, TTime>, VendorShorthandProperties<TLength, TTime> {}
+export interface VendorProperties<TLength = (NonNullableString) | 0, TTime = NonNullableString> extends VendorLonghandProperties<TLength, TTime>, VendorShorthandProperties<TLength, TTime> {}
 
-export interface ObsoleteProperties<TLength = (string & {}) | 0, TTime = string & {}> {
+export interface ObsoleteProperties<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
   /**
    * In combination with `elevation`, the **`azimuth`** CSS property enables different audio sources to be positioned spatially for aural presentation. This is important in that it provides a natural way to tell several voices apart, as each can be positioned to originate at a different location on the sound stage. Stereo output produce a lateral sound stage, while binaural headphones and multi-speaker setups allow for a fully three-dimensional stage.
    *
@@ -9077,7 +9079,7 @@ export interface ObsoleteProperties<TLength = (string & {}) | 0, TTime = string
   WebkitBoxPack?: Property.BoxPack | undefined;
 }
 
-export interface SvgProperties<TLength = (string & {}) | 0, TTime = string & {}> {
+export interface SvgProperties<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
   alignmentBaseline?: Property.AlignmentBaseline | undefined;
   baselineShift?: Property.BaselineShift<TLength> | undefined;
   clip?: Property.Clip | undefined;
@@ -9140,13 +9142,13 @@ export interface SvgProperties<TLength = (string & {}) | 0, TTime = string & {}>
   writingMode?: Property.WritingMode | undefined;
 }
 
-export interface Properties<TLength = (string & {}) | 0, TTime = string & {}>
+export interface Properties<TLength = (NonNullableString) | 0, TTime = NonNullableString>
   extends StandardProperties<TLength, TTime>,
     VendorProperties<TLength, TTime>,
     ObsoleteProperties<TLength, TTime>,
     SvgProperties<TLength, TTime> {}
 
-export interface StandardLonghandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
+export interface StandardLonghandPropertiesHyphen<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
   /**
    * The **`accent-color`** CSS property sets the accent color for user-interface controls generated by some elements.
    *
@@ -14420,7 +14422,7 @@ export interface StandardLonghandPropertiesHyphen<TLength = (string & {}) | 0, T
   zoom?: Property.Zoom | undefined;
 }
 
-export interface StandardShorthandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
+export interface StandardShorthandPropertiesHyphen<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
   /**
    * The **`all`** shorthand CSS property resets all of an element's properties except `unicode-bidi`, `direction`, and CSS Custom Properties. It can set properties to their initial or inherited values, or to the values specified in another cascade layer or stylesheet origin.
    *
@@ -15246,11 +15248,11 @@ export interface StandardShorthandPropertiesHyphen<TLength = (string & {}) | 0,
   "view-timeline"?: Property.ViewTimeline | undefined;
 }
 
-export interface StandardPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}>
+export interface StandardPropertiesHyphen<TLength = (NonNullableString) | 0, TTime = NonNullableString>
   extends StandardLonghandPropertiesHyphen<TLength, TTime>,
     StandardShorthandPropertiesHyphen<TLength, TTime> {}
 
-export interface VendorLonghandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
+export interface VendorLonghandPropertiesHyphen<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
   /**
    * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.
    *
@@ -17005,7 +17007,7 @@ export interface VendorLonghandPropertiesHyphen<TLength = (string & {}) | 0, TTi
   "-webkit-writing-mode"?: Property.WritingMode | undefined;
 }
 
-export interface VendorShorthandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
+export interface VendorShorthandPropertiesHyphen<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
   /**
    * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.
    *
@@ -17158,11 +17160,11 @@ export interface VendorShorthandPropertiesHyphen<TLength = (string & {}) | 0, TT
   "-webkit-transition"?: Property.Transition<TTime> | undefined;
 }
 
-export interface VendorPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}>
+export interface VendorPropertiesHyphen<TLength = (NonNullableString) | 0, TTime = NonNullableString>
   extends VendorLonghandPropertiesHyphen<TLength, TTime>,
     VendorShorthandPropertiesHyphen<TLength, TTime> {}
 
-export interface ObsoletePropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
+export interface ObsoletePropertiesHyphen<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
   /**
    * In combination with `elevation`, the **`azimuth`** CSS property enables different audio sources to be positioned spatially for aural presentation. This is important in that it provides a natural way to tell several voices apart, as each can be positioned to originate at a different location on the sound stage. Stereo output produce a lateral sound stage, while binaural headphones and multi-speaker setups allow for a fully three-dimensional stage.
    *
@@ -18217,7 +18219,7 @@ export interface ObsoletePropertiesHyphen<TLength = (string & {}) | 0, TTime = s
   "-webkit-box-pack"?: Property.BoxPack | undefined;
 }
 
-export interface SvgPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
+export interface SvgPropertiesHyphen<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
   "alignment-baseline"?: Property.AlignmentBaseline | undefined;
   "baseline-shift"?: Property.BaselineShift<TLength> | undefined;
   clip?: Property.Clip | undefined;
@@ -18280,59 +18282,59 @@ export interface SvgPropertiesHyphen<TLength = (string & {}) | 0, TTime = string
   "writing-mode"?: Property.WritingMode | undefined;
 }
 
-export interface PropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}>
+export interface PropertiesHyphen<TLength = (NonNullableString) | 0, TTime = NonNullableString>
   extends StandardPropertiesHyphen<TLength, TTime>,
     VendorPropertiesHyphen<TLength, TTime>,
     ObsoletePropertiesHyphen<TLength, TTime>,
     SvgPropertiesHyphen<TLength, TTime> {}
 
-export type StandardLonghandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardLonghandProperties<TLength, TTime>>;
+export type StandardLonghandPropertiesFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<StandardLonghandProperties<TLength, TTime>>;
 
-export type StandardShorthandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardShorthandProperties<TLength, TTime>>;
+export type StandardShorthandPropertiesFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<StandardShorthandProperties<TLength, TTime>>;
 
-export interface StandardPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}>
+export interface StandardPropertiesFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString>
   extends StandardLonghandPropertiesFallback<TLength, TTime>,
     StandardShorthandPropertiesFallback<TLength, TTime> {}
 
-export type VendorLonghandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorLonghandProperties<TLength, TTime>>;
+export type VendorLonghandPropertiesFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<VendorLonghandProperties<TLength, TTime>>;
 
-export type VendorShorthandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorShorthandProperties<TLength, TTime>>;
+export type VendorShorthandPropertiesFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<VendorShorthandProperties<TLength, TTime>>;
 
-export interface VendorPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}>
+export interface VendorPropertiesFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString>
   extends VendorLonghandPropertiesFallback<TLength, TTime>,
     VendorShorthandPropertiesFallback<TLength, TTime> {}
 
-export type ObsoletePropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<ObsoleteProperties<TLength, TTime>>;
+export type ObsoletePropertiesFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<ObsoleteProperties<TLength, TTime>>;
 
-export type SvgPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<SvgProperties<TLength, TTime>>;
+export type SvgPropertiesFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<SvgProperties<TLength, TTime>>;
 
-export interface PropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}>
+export interface PropertiesFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString>
   extends StandardPropertiesFallback<TLength, TTime>,
     VendorPropertiesFallback<TLength, TTime>,
     ObsoletePropertiesFallback<TLength, TTime>,
     SvgPropertiesFallback<TLength, TTime> {}
 
-export type StandardLonghandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardLonghandPropertiesHyphen<TLength, TTime>>;
+export type StandardLonghandPropertiesHyphenFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<StandardLonghandPropertiesHyphen<TLength, TTime>>;
 
-export type StandardShorthandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardShorthandPropertiesHyphen<TLength, TTime>>;
+export type StandardShorthandPropertiesHyphenFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<StandardShorthandPropertiesHyphen<TLength, TTime>>;
 
-export interface StandardPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}>
+export interface StandardPropertiesHyphenFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString>
   extends StandardLonghandPropertiesHyphenFallback<TLength, TTime>,
     StandardShorthandPropertiesHyphenFallback<TLength, TTime> {}
 
-export type VendorLonghandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorLonghandPropertiesHyphen<TLength, TTime>>;
+export type VendorLonghandPropertiesHyphenFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<VendorLonghandPropertiesHyphen<TLength, TTime>>;
 
-export type VendorShorthandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorShorthandPropertiesHyphen<TLength, TTime>>;
+export type VendorShorthandPropertiesHyphenFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<VendorShorthandPropertiesHyphen<TLength, TTime>>;
 
-export interface VendorPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}>
+export interface VendorPropertiesHyphenFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString>
   extends VendorLonghandPropertiesHyphenFallback<TLength, TTime>,
     VendorShorthandPropertiesHyphenFallback<TLength, TTime> {}
 
-export type ObsoletePropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<ObsoletePropertiesHyphen<TLength, TTime>>;
+export type ObsoletePropertiesHyphenFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<ObsoletePropertiesHyphen<TLength, TTime>>;
 
-export type SvgPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<SvgPropertiesHyphen<TLength, TTime>>;
+export type SvgPropertiesHyphenFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<SvgPropertiesHyphen<TLength, TTime>>;
 
-export interface PropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}>
+export interface PropertiesHyphenFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString>
   extends StandardPropertiesHyphenFallback<TLength, TTime>,
     VendorPropertiesHyphenFallback<TLength, TTime>,
     ObsoletePropertiesHyphenFallback<TLength, TTime>,
@@ -18948,47 +18950,47 @@ export type Globals = "-moz-initial" | "inherit" | "initial" | "revert" | "rever
 export namespace Property {
   export type AccentColor = Globals | DataType.Color | "auto";
 
-  export type AlignContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | "baseline" | "normal" | (string & {});
+  export type AlignContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | "baseline" | "normal" | (NonNullableString);
 
-  export type AlignItems = Globals | DataType.SelfPosition | "baseline" | "normal" | "stretch" | (string & {});
+  export type AlignItems = Globals | DataType.SelfPosition | "baseline" | "normal" | "stretch" | (NonNullableString);
 
-  export type AlignSelf = Globals | DataType.SelfPosition | "auto" | "baseline" | "normal" | "stretch" | (string & {});
+  export type AlignSelf = Globals | DataType.SelfPosition | "auto" | "baseline" | "normal" | "stretch" | (NonNullableString);
 
-  export type AlignTracks = Globals | DataType.ContentDistribution | DataType.ContentPosition | "baseline" | "normal" | (string & {});
+  export type AlignTracks = Globals | DataType.ContentDistribution | DataType.ContentPosition | "baseline" | "normal" | (NonNullableString);
 
   export type All = Globals;
 
-  export type Animation<TTime = string & {}> = Globals | DataType.SingleAnimation<TTime> | (string & {});
+  export type Animation<TTime = NonNullableString> = Globals | DataType.SingleAnimation<TTime> | (NonNullableString);
 
-  export type AnimationComposition = Globals | DataType.SingleAnimationComposition | (string & {});
+  export type AnimationComposition = Globals | DataType.SingleAnimationComposition | (NonNullableString);
 
-  export type AnimationDelay<TTime = string & {}> = Globals | TTime | (string & {});
+  export type AnimationDelay<TTime = NonNullableString> = Globals | TTime | (NonNullableString);
 
-  export type AnimationDirection = Globals | DataType.SingleAnimationDirection | (string & {});
+  export type AnimationDirection = Globals | DataType.SingleAnimationDirection | (NonNullableString);
 
-  export type AnimationDuration<TTime = string & {}> = Globals | TTime | (string & {});
+  export type AnimationDuration<TTime = NonNullableString> = Globals | TTime | (NonNullableString);
 
-  export type AnimationFillMode = Globals | DataType.SingleAnimationFillMode | (string & {});
+  export type AnimationFillMode = Globals | DataType.SingleAnimationFillMode | (NonNullableString);
 
-  export type AnimationIterationCount = Globals | "infinite" | (string & {}) | (number & {});
+  export type AnimationIterationCount = Globals | "infinite" | (NonNullableString) | (number & {});
 
-  export type AnimationName = Globals | "none" | (string & {});
+  export type AnimationName = Globals | "none" | (NonNullableString);
 
-  export type AnimationPlayState = Globals | "paused" | "running" | (string & {});
+  export type AnimationPlayState = Globals | "paused" | "running" | (NonNullableString);
 
-  export type AnimationRange<TLength = (string & {}) | 0> = Globals | DataType.TimelineRangeName | TLength | "normal" | (string & {});
+  export type AnimationRange<TLength = (NonNullableString) | 0> = Globals | DataType.TimelineRangeName | TLength | "normal" | (NonNullableString);
 
-  export type AnimationRangeEnd<TLength = (string & {}) | 0> = Globals | DataType.TimelineRangeName | TLength | "normal" | (string & {});
+  export type AnimationRangeEnd<TLength = (NonNullableString) | 0> = Globals | DataType.TimelineRangeName | TLength | "normal" | (NonNullableString);
 
-  export type AnimationRangeStart<TLength = (string & {}) | 0> = Globals | DataType.TimelineRangeName | TLength | "normal" | (string & {});
+  export type AnimationRangeStart<TLength = (NonNullableString) | 0> = Globals | DataType.TimelineRangeName | TLength | "normal" | (NonNullableString);
 
-  export type AnimationTimeline = Globals | DataType.SingleAnimationTimeline | (string & {});
+  export type AnimationTimeline = Globals | DataType.SingleAnimationTimeline | (NonNullableString);
 
-  export type AnimationTimingFunction = Globals | DataType.EasingFunction | (string & {});
+  export type AnimationTimingFunction = Globals | DataType.EasingFunction | (NonNullableString);
 
   export type Appearance = Globals | DataType.CompatAuto | "auto" | "menulist-button" | "none" | "textfield";
 
-  export type AspectRatio = Globals | "auto" | (string & {}) | (number & {});
+  export type AspectRatio = Globals | "auto" | (NonNullableString) | (number & {});
 
   export type Azimuth =
     | Globals
@@ -19004,39 +19006,39 @@ export namespace Property {
     | "right"
     | "right-side"
     | "rightwards"
-    | (string & {});
+    | (NonNullableString);
 
-  export type BackdropFilter = Globals | "none" | (string & {});
+  export type BackdropFilter = Globals | "none" | (NonNullableString);
 
   export type BackfaceVisibility = Globals | "hidden" | "visible";
 
-  export type Background<TLength = (string & {}) | 0> = Globals | DataType.FinalBgLayer<TLength> | (string & {});
+  export type Background<TLength = (NonNullableString) | 0> = Globals | DataType.FinalBgLayer<TLength> | (NonNullableString);
 
-  export type BackgroundAttachment = Globals | DataType.Attachment | (string & {});
+  export type BackgroundAttachment = Globals | DataType.Attachment | (NonNullableString);
 
-  export type BackgroundBlendMode = Globals | DataType.BlendMode | (string & {});
+  export type BackgroundBlendMode = Globals | DataType.BlendMode | (NonNullableString);
 
-  export type BackgroundClip = Globals | DataType.Box | (string & {});
+  export type BackgroundClip = Globals | DataType.Box | (NonNullableString);
 
   export type BackgroundColor = Globals | DataType.Color;
 
-  export type BackgroundImage = Globals | "none" | (string & {});
+  export type BackgroundImage = Globals | "none" | (NonNullableString);
 
-  export type BackgroundOrigin = Globals | DataType.Box | (string & {});
+  export type BackgroundOrigin = Globals | DataType.Box | (NonNullableString);
 
-  export type BackgroundPosition<TLength = (string & {}) | 0> = Globals | DataType.BgPosition<TLength> | (string & {});
+  export type BackgroundPosition<TLength = (NonNullableString) | 0> = Globals | DataType.BgPosition<TLength> | (NonNullableString);
 
-  export type BackgroundPositionX<TLength = (string & {}) | 0> = Globals | TLength | "center" | "left" | "right" | "x-end" | "x-start" | (string & {});
+  export type BackgroundPositionX<TLength = (NonNullableString) | 0> = Globals | TLength | "center" | "left" | "right" | "x-end" | "x-start" | (NonNullableString);
 
-  export type BackgroundPositionY<TLength = (string & {}) | 0> = Globals | TLength | "bottom" | "center" | "top" | "y-end" | "y-start" | (string & {});
+  export type BackgroundPositionY<TLength = (NonNullableString) | 0> = Globals | TLength | "bottom" | "center" | "top" | "y-end" | "y-start" | (NonNullableString);
 
-  export type BackgroundRepeat = Globals | DataType.RepeatStyle | (string & {});
+  export type BackgroundRepeat = Globals | DataType.RepeatStyle | (NonNullableString);
 
-  export type BackgroundSize<TLength = (string & {}) | 0> = Globals | DataType.BgSize<TLength> | (string & {});
+  export type BackgroundSize<TLength = (NonNullableString) | 0> = Globals | DataType.BgSize<TLength> | (NonNullableString);
 
-  export type BlockOverflow = Globals | "clip" | "ellipsis" | (string & {});
+  export type BlockOverflow = Globals | "clip" | "ellipsis" | (NonNullableString);
 
-  export type BlockSize<TLength = (string & {}) | 0> =
+  export type BlockSize<TLength = (NonNullableString) | 0> =
     | Globals
     | TLength
     | "-moz-fit-content"
@@ -19046,131 +19048,131 @@ export namespace Property {
     | "fit-content"
     | "max-content"
     | "min-content"
-    | (string & {});
+    | (NonNullableString);
 
-  export type Border<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
+  export type Border<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (NonNullableString);
 
-  export type BorderBlock<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
+  export type BorderBlock<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (NonNullableString);
 
-  export type BorderBlockColor = Globals | DataType.Color | (string & {});
+  export type BorderBlockColor = Globals | DataType.Color | (NonNullableString);
 
-  export type BorderBlockEnd<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
+  export type BorderBlockEnd<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (NonNullableString);
 
   export type BorderBlockEndColor = Globals | DataType.Color;
 
   export type BorderBlockEndStyle = Globals | DataType.LineStyle;
 
-  export type BorderBlockEndWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;
+  export type BorderBlockEndWidth<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength>;
 
-  export type BorderBlockStart<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
+  export type BorderBlockStart<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (NonNullableString);
 
   export type BorderBlockStartColor = Globals | DataType.Color;
 
   export type BorderBlockStartStyle = Globals | DataType.LineStyle;
 
-  export type BorderBlockStartWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;
+  export type BorderBlockStartWidth<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength>;
 
   export type BorderBlockStyle = Globals | DataType.LineStyle;
 
-  export type BorderBlockWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;
+  export type BorderBlockWidth<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength>;
 
-  export type BorderBottom<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
+  export type BorderBottom<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (NonNullableString);
 
   export type BorderBottomColor = Globals | DataType.Color;
 
-  export type BorderBottomLeftRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type BorderBottomLeftRadius<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type BorderBottomRightRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type BorderBottomRightRadius<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
   export type BorderBottomStyle = Globals | DataType.LineStyle;
 
-  export type BorderBottomWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;
+  export type BorderBottomWidth<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength>;
 
   export type BorderCollapse = Globals | "collapse" | "separate";
 
-  export type BorderColor = Globals | DataType.Color | (string & {});
+  export type BorderColor = Globals | DataType.Color | (NonNullableString);
 
-  export type BorderEndEndRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type BorderEndEndRadius<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type BorderEndStartRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type BorderEndStartRadius<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type BorderImage = Globals | "none" | "repeat" | "round" | "space" | "stretch" | (string & {}) | (number & {});
+  export type BorderImage = Globals | "none" | "repeat" | "round" | "space" | "stretch" | (NonNullableString) | (number & {});
 
-  export type BorderImageOutset<TLength = (string & {}) | 0> = Globals | TLength | (string & {}) | (number & {});
+  export type BorderImageOutset<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString) | (number & {});
 
-  export type BorderImageRepeat = Globals | "repeat" | "round" | "space" | "stretch" | (string & {});
+  export type BorderImageRepeat = Globals | "repeat" | "round" | "space" | "stretch" | (NonNullableString);
 
-  export type BorderImageSlice = Globals | (string & {}) | (number & {});
+  export type BorderImageSlice = Globals | (NonNullableString) | (number & {});
 
-  export type BorderImageSource = Globals | "none" | (string & {});
+  export type BorderImageSource = Globals | "none" | (NonNullableString);
 
-  export type BorderImageWidth<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {}) | (number & {});
+  export type BorderImageWidth<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString) | (number & {});
 
-  export type BorderInline<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
+  export type BorderInline<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (NonNullableString);
 
-  export type BorderInlineColor = Globals | DataType.Color | (string & {});
+  export type BorderInlineColor = Globals | DataType.Color | (NonNullableString);
 
-  export type BorderInlineEnd<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
+  export type BorderInlineEnd<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (NonNullableString);
 
   export type BorderInlineEndColor = Globals | DataType.Color;
 
   export type BorderInlineEndStyle = Globals | DataType.LineStyle;
 
-  export type BorderInlineEndWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;
+  export type BorderInlineEndWidth<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength>;
 
-  export type BorderInlineStart<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
+  export type BorderInlineStart<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (NonNullableString);
 
   export type BorderInlineStartColor = Globals | DataType.Color;
 
   export type BorderInlineStartStyle = Globals | DataType.LineStyle;
 
-  export type BorderInlineStartWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;
+  export type BorderInlineStartWidth<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength>;
 
   export type BorderInlineStyle = Globals | DataType.LineStyle;
 
-  export type BorderInlineWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;
+  export type BorderInlineWidth<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength>;
 
-  export type BorderLeft<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
+  export type BorderLeft<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (NonNullableString);
 
   export type BorderLeftColor = Globals | DataType.Color;
 
   export type BorderLeftStyle = Globals | DataType.LineStyle;
 
-  export type BorderLeftWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;
+  export type BorderLeftWidth<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength>;
 
-  export type BorderRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type BorderRadius<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type BorderRight<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
+  export type BorderRight<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (NonNullableString);
 
   export type BorderRightColor = Globals | DataType.Color;
 
   export type BorderRightStyle = Globals | DataType.LineStyle;
 
-  export type BorderRightWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;
+  export type BorderRightWidth<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength>;
 
-  export type BorderSpacing<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type BorderSpacing<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type BorderStartEndRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type BorderStartEndRadius<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type BorderStartStartRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type BorderStartStartRadius<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type BorderStyle = Globals | DataType.LineStyle | (string & {});
+  export type BorderStyle = Globals | DataType.LineStyle | (NonNullableString);
 
-  export type BorderTop<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
+  export type BorderTop<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (NonNullableString);
 
   export type BorderTopColor = Globals | DataType.Color;
 
-  export type BorderTopLeftRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type BorderTopLeftRadius<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type BorderTopRightRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type BorderTopRightRadius<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
   export type BorderTopStyle = Globals | DataType.LineStyle;
 
-  export type BorderTopWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;
+  export type BorderTopWidth<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength>;
 
-  export type BorderWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | (string & {});
+  export type BorderWidth<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength> | (NonNullableString);
 
-  export type Bottom<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type Bottom<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
   export type BoxAlign = Globals | "baseline" | "center" | "end" | "start" | "stretch";
 
@@ -19178,19 +19180,19 @@ export namespace Property {
 
   export type BoxDirection = Globals | "inherit" | "normal" | "reverse";
 
-  export type BoxFlex = Globals | (number & {}) | (string & {});
+  export type BoxFlex = Globals | (number & {}) | (NonNullableString);
 
-  export type BoxFlexGroup = Globals | (number & {}) | (string & {});
+  export type BoxFlexGroup = Globals | (number & {}) | (NonNullableString);
 
   export type BoxLines = Globals | "multiple" | "single";
 
-  export type BoxOrdinalGroup = Globals | (number & {}) | (string & {});
+  export type BoxOrdinalGroup = Globals | (number & {}) | (NonNullableString);
 
   export type BoxOrient = Globals | "block-axis" | "horizontal" | "inherit" | "inline-axis" | "vertical";
 
   export type BoxPack = Globals | "center" | "end" | "justify" | "start";
 
-  export type BoxShadow = Globals | "none" | (string & {});
+  export type BoxShadow = Globals | "none" | (NonNullableString);
 
   export type BoxSizing = Globals | "border-box" | "content-box";
 
@@ -19232,7 +19234,7 @@ export namespace Property {
 
   export type CaptionSide = Globals | "block-end" | "block-start" | "bottom" | "inline-end" | "inline-start" | "top";
 
-  export type Caret = Globals | DataType.Color | "auto" | "bar" | "block" | "underscore" | (string & {});
+  export type Caret = Globals | DataType.Color | "auto" | "bar" | "block" | "underscore" | (NonNullableString);
 
   export type CaretColor = Globals | DataType.Color | "auto";
 
@@ -19240,63 +19242,63 @@ export namespace Property {
 
   export type Clear = Globals | "both" | "inline-end" | "inline-start" | "left" | "none" | "right";
 
-  export type Clip = Globals | "auto" | (string & {});
+  export type Clip = Globals | "auto" | (NonNullableString);
 
-  export type ClipPath = Globals | DataType.GeometryBox | "none" | (string & {});
+  export type ClipPath = Globals | DataType.GeometryBox | "none" | (NonNullableString);
 
   export type Color = Globals | DataType.Color;
 
   export type PrintColorAdjust = Globals | "economy" | "exact";
 
-  export type ColorScheme = Globals | "dark" | "light" | "normal" | (string & {});
+  export type ColorScheme = Globals | "dark" | "light" | "normal" | (NonNullableString);
 
-  export type ColumnCount = Globals | "auto" | (number & {}) | (string & {});
+  export type ColumnCount = Globals | "auto" | (number & {}) | (NonNullableString);
 
   export type ColumnFill = Globals | "auto" | "balance" | "balance-all";
 
-  export type ColumnGap<TLength = (string & {}) | 0> = Globals | TLength | "normal" | (string & {});
+  export type ColumnGap<TLength = (NonNullableString) | 0> = Globals | TLength | "normal" | (NonNullableString);
 
-  export type ColumnRule<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
+  export type ColumnRule<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (NonNullableString);
 
   export type ColumnRuleColor = Globals | DataType.Color;
 
-  export type ColumnRuleStyle = Globals | DataType.LineStyle | (string & {});
+  export type ColumnRuleStyle = Globals | DataType.LineStyle | (NonNullableString);
 
-  export type ColumnRuleWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | (string & {});
+  export type ColumnRuleWidth<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength> | (NonNullableString);
 
   export type ColumnSpan = Globals | "all" | "none";
 
-  export type ColumnWidth<TLength = (string & {}) | 0> = Globals | TLength | "auto";
+  export type ColumnWidth<TLength = (NonNullableString) | 0> = Globals | TLength | "auto";
 
-  export type Columns<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {}) | (number & {});
+  export type Columns<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString) | (number & {});
 
-  export type Contain = Globals | "content" | "inline-size" | "layout" | "none" | "paint" | "size" | "strict" | "style" | (string & {});
+  export type Contain = Globals | "content" | "inline-size" | "layout" | "none" | "paint" | "size" | "strict" | "style" | (NonNullableString);
 
-  export type ContainIntrinsicBlockSize<TLength = (string & {}) | 0> = Globals | TLength | "none" | (string & {});
+  export type ContainIntrinsicBlockSize<TLength = (NonNullableString) | 0> = Globals | TLength | "none" | (NonNullableString);
 
-  export type ContainIntrinsicHeight<TLength = (string & {}) | 0> = Globals | TLength | "none" | (string & {});
+  export type ContainIntrinsicHeight<TLength = (NonNullableString) | 0> = Globals | TLength | "none" | (NonNullableString);
 
-  export type ContainIntrinsicInlineSize<TLength = (string & {}) | 0> = Globals | TLength | "none" | (string & {});
+  export type ContainIntrinsicInlineSize<TLength = (NonNullableString) | 0> = Globals | TLength | "none" | (NonNullableString);
 
-  export type ContainIntrinsicSize<TLength = (string & {}) | 0> = Globals | TLength | "none" | (string & {});
+  export type ContainIntrinsicSize<TLength = (NonNullableString) | 0> = Globals | TLength | "none" | (NonNullableString);
 
-  export type ContainIntrinsicWidth<TLength = (string & {}) | 0> = Globals | TLength | "none" | (string & {});
+  export type ContainIntrinsicWidth<TLength = (NonNullableString) | 0> = Globals | TLength | "none" | (NonNullableString);
 
-  export type Container = Globals | "none" | (string & {});
+  export type Container = Globals | "none" | (NonNullableString);
 
-  export type ContainerName = Globals | "none" | (string & {});
+  export type ContainerName = Globals | "none" | (NonNullableString);
 
   export type ContainerType = Globals | "inline-size" | "normal" | "size";
 
-  export type Content = Globals | DataType.ContentList | "none" | "normal" | (string & {});
+  export type Content = Globals | DataType.ContentList | "none" | "normal" | (NonNullableString);
 
   export type ContentVisibility = Globals | "auto" | "hidden" | "visible";
 
-  export type CounterIncrement = Globals | "none" | (string & {});
+  export type CounterIncrement = Globals | "none" | (NonNullableString);
 
-  export type CounterReset = Globals | "none" | (string & {});
+  export type CounterReset = Globals | "none" | (NonNullableString);
 
-  export type CounterSet = Globals | "none" | (string & {});
+  export type CounterSet = Globals | "none" | (NonNullableString);
 
   export type Cursor =
     | Globals
@@ -19338,7 +19340,7 @@ export namespace Property {
     | "wait"
     | "zoom-in"
     | "zoom-out"
-    | (string & {});
+    | (NonNullableString);
 
   export type Direction = Globals | "ltr" | "rtl";
 
@@ -19351,15 +19353,15 @@ export namespace Property {
     | "contents"
     | "list-item"
     | "none"
-    | (string & {});
+    | (NonNullableString);
 
   export type EmptyCells = Globals | "hide" | "show";
 
-  export type Filter = Globals | "none" | (string & {});
+  export type Filter = Globals | "none" | (NonNullableString);
 
-  export type Flex<TLength = (string & {}) | 0> = Globals | TLength | "auto" | "content" | "fit-content" | "max-content" | "min-content" | "none" | (string & {}) | (number & {});
+  export type Flex<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | "content" | "fit-content" | "max-content" | "min-content" | "none" | (NonNullableString) | (number & {});
 
-  export type FlexBasis<TLength = (string & {}) | 0> =
+  export type FlexBasis<TLength = (NonNullableString) | 0> =
     | Globals
     | TLength
     | "-moz-fit-content"
@@ -19371,45 +19373,45 @@ export namespace Property {
     | "fit-content"
     | "max-content"
     | "min-content"
-    | (string & {});
+    | (NonNullableString);
 
   export type FlexDirection = Globals | "column" | "column-reverse" | "row" | "row-reverse";
 
-  export type FlexFlow = Globals | "column" | "column-reverse" | "nowrap" | "row" | "row-reverse" | "wrap" | "wrap-reverse" | (string & {});
+  export type FlexFlow = Globals | "column" | "column-reverse" | "nowrap" | "row" | "row-reverse" | "wrap" | "wrap-reverse" | (NonNullableString);
 
-  export type FlexGrow = Globals | (number & {}) | (string & {});
+  export type FlexGrow = Globals | (number & {}) | (NonNullableString);
 
-  export type FlexShrink = Globals | (number & {}) | (string & {});
+  export type FlexShrink = Globals | (number & {}) | (NonNullableString);
 
   export type FlexWrap = Globals | "nowrap" | "wrap" | "wrap-reverse";
 
   export type Float = Globals | "inline-end" | "inline-start" | "left" | "none" | "right";
 
-  export type Font = Globals | "caption" | "icon" | "menu" | "message-box" | "small-caption" | "status-bar" | (string & {});
+  export type Font = Globals | "caption" | "icon" | "menu" | "message-box" | "small-caption" | "status-bar" | (NonNullableString);
 
-  export type FontFamily = Globals | DataType.GenericFamily | (string & {});
+  export type FontFamily = Globals | DataType.GenericFamily | (NonNullableString);
 
-  export type FontFeatureSettings = Globals | "normal" | (string & {});
+  export type FontFeatureSettings = Globals | "normal" | (NonNullableString);
 
   export type FontKerning = Globals | "auto" | "none" | "normal";
 
-  export type FontLanguageOverride = Globals | "normal" | (string & {});
+  export type FontLanguageOverride = Globals | "normal" | (NonNullableString);
 
   export type FontOpticalSizing = Globals | "auto" | "none";
 
-  export type FontPalette = Globals | "dark" | "light" | "normal" | (string & {});
+  export type FontPalette = Globals | "dark" | "light" | "normal" | (NonNullableString);
 
-  export type FontSize<TLength = (string & {}) | 0> = Globals | DataType.AbsoluteSize | TLength | "larger" | "smaller" | (string & {});
+  export type FontSize<TLength = (NonNullableString) | 0> = Globals | DataType.AbsoluteSize | TLength | "larger" | "smaller" | (NonNullableString);
 
-  export type FontSizeAdjust = Globals | "from-font" | "none" | (string & {}) | (number & {});
+  export type FontSizeAdjust = Globals | "from-font" | "none" | (NonNullableString) | (number & {});
 
-  export type FontSmooth<TLength = (string & {}) | 0> = Globals | DataType.AbsoluteSize | TLength | "always" | "auto" | "never";
+  export type FontSmooth<TLength = (NonNullableString) | 0> = Globals | DataType.AbsoluteSize | TLength | "always" | "auto" | "never";
 
   export type FontStretch = Globals | DataType.FontStretchAbsolute;
 
-  export type FontStyle = Globals | "italic" | "normal" | "oblique" | (string & {});
+  export type FontStyle = Globals | "italic" | "normal" | "oblique" | (NonNullableString);
 
-  export type FontSynthesis = Globals | "none" | "position" | "small-caps" | "style" | "weight" | (string & {});
+  export type FontSynthesis = Globals | "none" | "position" | "small-caps" | "style" | "weight" | (NonNullableString);
 
   export type FontSynthesisPosition = Globals | "auto" | "none";
 
@@ -19450,13 +19452,13 @@ export namespace Property {
     | "tabular-nums"
     | "titling-caps"
     | "unicase"
-    | (string & {});
+    | (NonNullableString);
 
-  export type FontVariantAlternates = Globals | "historical-forms" | "normal" | (string & {});
+  export type FontVariantAlternates = Globals | "historical-forms" | "normal" | (NonNullableString);
 
   export type FontVariantCaps = Globals | "all-petite-caps" | "all-small-caps" | "normal" | "petite-caps" | "small-caps" | "titling-caps" | "unicase";
 
-  export type FontVariantEastAsian = Globals | DataType.EastAsianVariantValues | "full-width" | "normal" | "proportional-width" | "ruby" | (string & {});
+  export type FontVariantEastAsian = Globals | DataType.EastAsianVariantValues | "full-width" | "normal" | "proportional-width" | "ruby" | (NonNullableString);
 
   export type FontVariantEmoji = Globals | "emoji" | "normal" | "text" | "unicode";
 
@@ -19472,7 +19474,7 @@ export namespace Property {
     | "no-historical-ligatures"
     | "none"
     | "normal"
-    | (string & {});
+    | (NonNullableString);
 
   export type FontVariantNumeric =
     | Globals
@@ -19485,57 +19487,57 @@ export namespace Property {
     | "slashed-zero"
     | "stacked-fractions"
     | "tabular-nums"
-    | (string & {});
+    | (NonNullableString);
 
   export type FontVariantPosition = Globals | "normal" | "sub" | "super";
 
-  export type FontVariationSettings = Globals | "normal" | (string & {});
+  export type FontVariationSettings = Globals | "normal" | (NonNullableString);
 
   export type FontWeight = Globals | DataType.FontWeightAbsolute | "bolder" | "lighter";
 
   export type ForcedColorAdjust = Globals | "auto" | "none";
 
-  export type Gap<TLength = (string & {}) | 0> = Globals | TLength | "normal" | (string & {});
+  export type Gap<TLength = (NonNullableString) | 0> = Globals | TLength | "normal" | (NonNullableString);
 
-  export type Grid = Globals | "none" | (string & {});
+  export type Grid = Globals | "none" | (NonNullableString);
 
-  export type GridArea = Globals | DataType.GridLine | (string & {});
+  export type GridArea = Globals | DataType.GridLine | (NonNullableString);
 
-  export type GridAutoColumns<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | (string & {});
+  export type GridAutoColumns<TLength = (NonNullableString) | 0> = Globals | DataType.TrackBreadth<TLength> | (NonNullableString);
 
-  export type GridAutoFlow = Globals | "column" | "dense" | "row" | (string & {});
+  export type GridAutoFlow = Globals | "column" | "dense" | "row" | (NonNullableString);
 
-  export type GridAutoRows<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | (string & {});
+  export type GridAutoRows<TLength = (NonNullableString) | 0> = Globals | DataType.TrackBreadth<TLength> | (NonNullableString);
 
-  export type GridColumn = Globals | DataType.GridLine | (string & {});
+  export type GridColumn = Globals | DataType.GridLine | (NonNullableString);
 
   export type GridColumnEnd = Globals | DataType.GridLine;
 
-  export type GridColumnGap<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type GridColumnGap<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
   export type GridColumnStart = Globals | DataType.GridLine;
 
-  export type GridGap<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type GridGap<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type GridRow = Globals | DataType.GridLine | (string & {});
+  export type GridRow = Globals | DataType.GridLine | (NonNullableString);
 
   export type GridRowEnd = Globals | DataType.GridLine;
 
-  export type GridRowGap<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type GridRowGap<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
   export type GridRowStart = Globals | DataType.GridLine;
 
-  export type GridTemplate = Globals | "none" | (string & {});
+  export type GridTemplate = Globals | "none" | (NonNullableString);
 
-  export type GridTemplateAreas = Globals | "none" | (string & {});
+  export type GridTemplateAreas = Globals | "none" | (NonNullableString);
 
-  export type GridTemplateColumns<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | "none" | "subgrid" | (string & {});
+  export type GridTemplateColumns<TLength = (NonNullableString) | 0> = Globals | DataType.TrackBreadth<TLength> | "none" | "subgrid" | (NonNullableString);
 
-  export type GridTemplateRows<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | "none" | "subgrid" | (string & {});
+  export type GridTemplateRows<TLength = (NonNullableString) | 0> = Globals | DataType.TrackBreadth<TLength> | "none" | "subgrid" | (NonNullableString);
 
-  export type HangingPunctuation = Globals | "allow-end" | "first" | "force-end" | "last" | "none" | (string & {});
+  export type HangingPunctuation = Globals | "allow-end" | "first" | "force-end" | "last" | "none" | (NonNullableString);
 
-  export type Height<TLength = (string & {}) | 0> =
+  export type Height<TLength = (NonNullableString) | 0> =
     | Globals
     | TLength
     | "-moz-max-content"
@@ -19545,25 +19547,25 @@ export namespace Property {
     | "fit-content"
     | "max-content"
     | "min-content"
-    | (string & {});
+    | (NonNullableString);
 
-  export type HyphenateCharacter = Globals | "auto" | (string & {});
+  export type HyphenateCharacter = Globals | "auto" | (NonNullableString);
 
-  export type HyphenateLimitChars = Globals | "auto" | (string & {}) | (number & {});
+  export type HyphenateLimitChars = Globals | "auto" | (NonNullableString) | (number & {});
 
   export type Hyphens = Globals | "auto" | "manual" | "none";
 
-  export type ImageOrientation = Globals | "flip" | "from-image" | (string & {});
+  export type ImageOrientation = Globals | "flip" | "from-image" | (NonNullableString);
 
   export type ImageRendering = Globals | "-moz-crisp-edges" | "-webkit-optimize-contrast" | "auto" | "crisp-edges" | "pixelated";
 
-  export type ImageResolution = Globals | "from-image" | (string & {});
+  export type ImageResolution = Globals | "from-image" | (NonNullableString);
 
   export type ImeMode = Globals | "active" | "auto" | "disabled" | "inactive" | "normal";
 
-  export type InitialLetter = Globals | "normal" | (string & {}) | (number & {});
+  export type InitialLetter = Globals | "normal" | (NonNullableString) | (number & {});
 
-  export type InlineSize<TLength = (string & {}) | 0> =
+  export type InlineSize<TLength = (NonNullableString) | 0> =
     | Globals
     | TLength
     | "-moz-fit-content"
@@ -19574,121 +19576,121 @@ export namespace Property {
     | "fit-content"
     | "max-content"
     | "min-content"
-    | (string & {});
+    | (NonNullableString);
 
   export type InputSecurity = Globals | "auto" | "none";
 
-  export type Inset<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type Inset<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type InsetBlock<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type InsetBlock<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type InsetBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type InsetBlockEnd<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type InsetBlockStart<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type InsetBlockStart<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type InsetInline<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type InsetInline<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type InsetInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type InsetInlineEnd<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type InsetInlineStart<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type InsetInlineStart<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
   export type Isolation = Globals | "auto" | "isolate";
 
-  export type JustifyContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | "left" | "normal" | "right" | (string & {});
+  export type JustifyContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | "left" | "normal" | "right" | (NonNullableString);
 
-  export type JustifyItems = Globals | DataType.SelfPosition | "baseline" | "left" | "legacy" | "normal" | "right" | "stretch" | (string & {});
+  export type JustifyItems = Globals | DataType.SelfPosition | "baseline" | "left" | "legacy" | "normal" | "right" | "stretch" | (NonNullableString);
 
-  export type JustifySelf = Globals | DataType.SelfPosition | "auto" | "baseline" | "left" | "normal" | "right" | "stretch" | (string & {});
+  export type JustifySelf = Globals | DataType.SelfPosition | "auto" | "baseline" | "left" | "normal" | "right" | "stretch" | (NonNullableString);
 
-  export type JustifyTracks = Globals | DataType.ContentDistribution | DataType.ContentPosition | "left" | "normal" | "right" | (string & {});
+  export type JustifyTracks = Globals | DataType.ContentDistribution | DataType.ContentPosition | "left" | "normal" | "right" | (NonNullableString);
 
-  export type Left<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type Left<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type LetterSpacing<TLength = (string & {}) | 0> = Globals | TLength | "normal";
+  export type LetterSpacing<TLength = (NonNullableString) | 0> = Globals | TLength | "normal";
 
   export type LineBreak = Globals | "anywhere" | "auto" | "loose" | "normal" | "strict";
 
-  export type LineClamp = Globals | "none" | (number & {}) | (string & {});
+  export type LineClamp = Globals | "none" | (number & {}) | (NonNullableString);
 
-  export type LineHeight<TLength = (string & {}) | 0> = Globals | TLength | "normal" | (string & {}) | (number & {});
+  export type LineHeight<TLength = (NonNullableString) | 0> = Globals | TLength | "normal" | (NonNullableString) | (number & {});
 
-  export type LineHeightStep<TLength = (string & {}) | 0> = Globals | TLength;
+  export type LineHeightStep<TLength = (NonNullableString) | 0> = Globals | TLength;
 
-  export type ListStyle = Globals | "inside" | "none" | "outside" | (string & {});
+  export type ListStyle = Globals | "inside" | "none" | "outside" | (NonNullableString);
 
-  export type ListStyleImage = Globals | "none" | (string & {});
+  export type ListStyleImage = Globals | "none" | (NonNullableString);
 
   export type ListStylePosition = Globals | "inside" | "outside";
 
-  export type ListStyleType = Globals | "none" | (string & {});
+  export type ListStyleType = Globals | "none" | (NonNullableString);
 
-  export type Margin<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type Margin<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type MarginBlock<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type MarginBlock<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type MarginBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type MarginBlockEnd<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type MarginBlockStart<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type MarginBlockStart<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type MarginBottom<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type MarginBottom<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type MarginInline<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type MarginInline<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type MarginInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type MarginInlineEnd<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type MarginInlineStart<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type MarginInlineStart<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type MarginLeft<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type MarginLeft<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type MarginRight<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type MarginRight<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type MarginTop<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type MarginTop<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
   export type MarginTrim = Globals | "all" | "in-flow" | "none";
 
-  export type Mask<TLength = (string & {}) | 0> = Globals | DataType.MaskLayer<TLength> | (string & {});
+  export type Mask<TLength = (NonNullableString) | 0> = Globals | DataType.MaskLayer<TLength> | (NonNullableString);
 
-  export type MaskBorder = Globals | "alpha" | "luminance" | "none" | "repeat" | "round" | "space" | "stretch" | (string & {}) | (number & {});
+  export type MaskBorder = Globals | "alpha" | "luminance" | "none" | "repeat" | "round" | "space" | "stretch" | (NonNullableString) | (number & {});
 
   export type MaskBorderMode = Globals | "alpha" | "luminance";
 
-  export type MaskBorderOutset<TLength = (string & {}) | 0> = Globals | TLength | (string & {}) | (number & {});
+  export type MaskBorderOutset<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString) | (number & {});
 
-  export type MaskBorderRepeat = Globals | "repeat" | "round" | "space" | "stretch" | (string & {});
+  export type MaskBorderRepeat = Globals | "repeat" | "round" | "space" | "stretch" | (NonNullableString);
 
-  export type MaskBorderSlice = Globals | (string & {}) | (number & {});
+  export type MaskBorderSlice = Globals | (NonNullableString) | (number & {});
 
-  export type MaskBorderSource = Globals | "none" | (string & {});
+  export type MaskBorderSource = Globals | "none" | (NonNullableString);
 
-  export type MaskBorderWidth<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {}) | (number & {});
+  export type MaskBorderWidth<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString) | (number & {});
 
-  export type MaskClip = Globals | DataType.GeometryBox | "no-clip" | (string & {});
+  export type MaskClip = Globals | DataType.GeometryBox | "no-clip" | (NonNullableString);
 
-  export type MaskComposite = Globals | DataType.CompositingOperator | (string & {});
+  export type MaskComposite = Globals | DataType.CompositingOperator | (NonNullableString);
 
-  export type MaskImage = Globals | "none" | (string & {});
+  export type MaskImage = Globals | "none" | (NonNullableString);
 
-  export type MaskMode = Globals | DataType.MaskingMode | (string & {});
+  export type MaskMode = Globals | DataType.MaskingMode | (NonNullableString);
 
-  export type MaskOrigin = Globals | DataType.GeometryBox | (string & {});
+  export type MaskOrigin = Globals | DataType.GeometryBox | (NonNullableString);
 
-  export type MaskPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | (string & {});
+  export type MaskPosition<TLength = (NonNullableString) | 0> = Globals | DataType.Position<TLength> | (NonNullableString);
 
-  export type MaskRepeat = Globals | DataType.RepeatStyle | (string & {});
+  export type MaskRepeat = Globals | DataType.RepeatStyle | (NonNullableString);
 
-  export type MaskSize<TLength = (string & {}) | 0> = Globals | DataType.BgSize<TLength> | (string & {});
+  export type MaskSize<TLength = (NonNullableString) | 0> = Globals | DataType.BgSize<TLength> | (NonNullableString);
 
   export type MaskType = Globals | "alpha" | "luminance";
 
-  export type MasonryAutoFlow = Globals | "definite-first" | "next" | "ordered" | "pack" | (string & {});
+  export type MasonryAutoFlow = Globals | "definite-first" | "next" | "ordered" | "pack" | (NonNullableString);
 
-  export type MathDepth = Globals | "auto-add" | (string & {}) | (number & {});
+  export type MathDepth = Globals | "auto-add" | (NonNullableString) | (number & {});
 
   export type MathShift = Globals | "compact" | "normal";
 
   export type MathStyle = Globals | "compact" | "normal";
 
-  export type MaxBlockSize<TLength = (string & {}) | 0> =
+  export type MaxBlockSize<TLength = (NonNullableString) | 0> =
     | Globals
     | TLength
     | "-moz-max-content"
@@ -19698,9 +19700,9 @@ export namespace Property {
     | "max-content"
     | "min-content"
     | "none"
-    | (string & {});
+    | (NonNullableString);
 
-  export type MaxHeight<TLength = (string & {}) | 0> =
+  export type MaxHeight<TLength = (NonNullableString) | 0> =
     | Globals
     | TLength
     | "-moz-fit-content"
@@ -19714,9 +19716,9 @@ export namespace Property {
     | "max-content"
     | "min-content"
     | "none"
-    | (string & {});
+    | (NonNullableString);
 
-  export type MaxInlineSize<TLength = (string & {}) | 0> =
+  export type MaxInlineSize<TLength = (NonNullableString) | 0> =
     | Globals
     | TLength
     | "-moz-fit-content"
@@ -19727,11 +19729,11 @@ export namespace Property {
     | "max-content"
     | "min-content"
     | "none"
-    | (string & {});
+    | (NonNullableString);
 
-  export type MaxLines = Globals | "none" | (number & {}) | (string & {});
+  export type MaxLines = Globals | "none" | (number & {}) | (NonNullableString);
 
-  export type MaxWidth<TLength = (string & {}) | 0> =
+  export type MaxWidth<TLength = (NonNullableString) | 0> =
     | Globals
     | TLength
     | "-moz-fit-content"
@@ -19745,9 +19747,9 @@ export namespace Property {
     | "max-content"
     | "min-content"
     | "none"
-    | (string & {});
+    | (NonNullableString);
 
-  export type MinBlockSize<TLength = (string & {}) | 0> =
+  export type MinBlockSize<TLength = (NonNullableString) | 0> =
     | Globals
     | TLength
     | "-moz-max-content"
@@ -19757,9 +19759,9 @@ export namespace Property {
     | "fit-content"
     | "max-content"
     | "min-content"
-    | (string & {});
+    | (NonNullableString);
 
-  export type MinHeight<TLength = (string & {}) | 0> =
+  export type MinHeight<TLength = (NonNullableString) | 0> =
     | Globals
     | TLength
     | "-moz-fit-content"
@@ -19773,9 +19775,9 @@ export namespace Property {
     | "intrinsic"
     | "max-content"
     | "min-content"
-    | (string & {});
+    | (NonNullableString);
 
-  export type MinInlineSize<TLength = (string & {}) | 0> =
+  export type MinInlineSize<TLength = (NonNullableString) | 0> =
     | Globals
     | TLength
     | "-moz-fit-content"
@@ -19786,9 +19788,9 @@ export namespace Property {
     | "fit-content"
     | "max-content"
     | "min-content"
-    | (string & {});
+    | (NonNullableString);
 
-  export type MinWidth<TLength = (string & {}) | 0> =
+  export type MinWidth<TLength = (NonNullableString) | 0> =
     | Globals
     | TLength
     | "-moz-fit-content"
@@ -19804,43 +19806,43 @@ export namespace Property {
     | "max-content"
     | "min-content"
     | "min-intrinsic"
-    | (string & {});
+    | (NonNullableString);
 
   export type MixBlendMode = Globals | DataType.BlendMode | "plus-lighter";
 
-  export type Offset<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | "auto" | "none" | "normal" | (string & {});
+  export type Offset<TLength = (NonNullableString) | 0> = Globals | DataType.Position<TLength> | "auto" | "none" | "normal" | (NonNullableString);
 
-  export type OffsetDistance<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type OffsetDistance<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type OffsetPath = Globals | "none" | (string & {});
+  export type OffsetPath = Globals | "none" | (NonNullableString);
 
-  export type OffsetRotate = Globals | "auto" | "reverse" | (string & {});
+  export type OffsetRotate = Globals | "auto" | "reverse" | (NonNullableString);
 
   export type ObjectFit = Globals | "contain" | "cover" | "fill" | "none" | "scale-down";
 
-  export type ObjectPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength>;
+  export type ObjectPosition<TLength = (NonNullableString) | 0> = Globals | DataType.Position<TLength>;
 
-  export type OffsetAnchor<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | "auto";
+  export type OffsetAnchor<TLength = (NonNullableString) | 0> = Globals | DataType.Position<TLength> | "auto";
 
-  export type OffsetPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | "auto" | "normal";
+  export type OffsetPosition<TLength = (NonNullableString) | 0> = Globals | DataType.Position<TLength> | "auto" | "normal";
 
-  export type Opacity = Globals | (string & {}) | (number & {});
+  export type Opacity = Globals | (NonNullableString) | (number & {});
 
-  export type Order = Globals | (number & {}) | (string & {});
+  export type Order = Globals | (number & {}) | (NonNullableString);
 
-  export type Orphans = Globals | (number & {}) | (string & {});
+  export type Orphans = Globals | (number & {}) | (NonNullableString);
 
-  export type Outline<TLength = (string & {}) | 0> = Globals | DataType.Color | DataType.LineStyle | DataType.LineWidth<TLength> | "auto" | "invert" | (string & {});
+  export type Outline<TLength = (NonNullableString) | 0> = Globals | DataType.Color | DataType.LineStyle | DataType.LineWidth<TLength> | "auto" | "invert" | (NonNullableString);
 
   export type OutlineColor = Globals | DataType.Color | "invert";
 
-  export type OutlineOffset<TLength = (string & {}) | 0> = Globals | TLength;
+  export type OutlineOffset<TLength = (NonNullableString) | 0> = Globals | TLength;
 
-  export type OutlineStyle = Globals | DataType.LineStyle | "auto" | (string & {});
+  export type OutlineStyle = Globals | DataType.LineStyle | "auto" | (NonNullableString);
 
-  export type OutlineWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;
+  export type OutlineWidth<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength>;
 
-  export type Overflow = Globals | "-moz-hidden-unscrollable" | "auto" | "clip" | "hidden" | "scroll" | "visible" | (string & {});
+  export type Overflow = Globals | "-moz-hidden-unscrollable" | "auto" | "clip" | "hidden" | "scroll" | "visible" | (NonNullableString);
 
   export type OverflowAnchor = Globals | "auto" | "none";
 
@@ -19848,7 +19850,7 @@ export namespace Property {
 
   export type OverflowClipBox = Globals | "content-box" | "padding-box";
 
-  export type OverflowClipMargin<TLength = (string & {}) | 0> = Globals | DataType.VisualBox | TLength | (string & {});
+  export type OverflowClipMargin<TLength = (NonNullableString) | 0> = Globals | DataType.VisualBox | TLength | (NonNullableString);
 
   export type OverflowInline = Globals | "auto" | "clip" | "hidden" | "scroll" | "visible";
 
@@ -19860,7 +19862,7 @@ export namespace Property {
 
   export type Overlay = Globals | "auto" | "none";
 
-  export type OverscrollBehavior = Globals | "auto" | "contain" | "none" | (string & {});
+  export type OverscrollBehavior = Globals | "auto" | "contain" | "none" | (NonNullableString);
 
   export type OverscrollBehaviorBlock = Globals | "auto" | "contain" | "none";
 
@@ -19870,29 +19872,29 @@ export namespace Property {
 
   export type OverscrollBehaviorY = Globals | "auto" | "contain" | "none";
 
-  export type Padding<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type Padding<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type PaddingBlock<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type PaddingBlock<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type PaddingBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type PaddingBlockEnd<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type PaddingBlockStart<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type PaddingBlockStart<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type PaddingBottom<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type PaddingBottom<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type PaddingInline<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type PaddingInline<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type PaddingInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type PaddingInlineEnd<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type PaddingInlineStart<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type PaddingInlineStart<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type PaddingLeft<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type PaddingLeft<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type PaddingRight<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type PaddingRight<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type PaddingTop<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type PaddingTop<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type Page = Globals | "auto" | (string & {});
+  export type Page = Globals | "auto" | (NonNullableString);
 
   export type PageBreakAfter = Globals | "always" | "auto" | "avoid" | "left" | "recto" | "right" | "verso";
 
@@ -19900,123 +19902,123 @@ export namespace Property {
 
   export type PageBreakInside = Globals | "auto" | "avoid";
 
-  export type PaintOrder = Globals | "fill" | "markers" | "normal" | "stroke" | (string & {});
+  export type PaintOrder = Globals | "fill" | "markers" | "normal" | "stroke" | (NonNullableString);
 
-  export type Perspective<TLength = (string & {}) | 0> = Globals | TLength | "none";
+  export type Perspective<TLength = (NonNullableString) | 0> = Globals | TLength | "none";
 
-  export type PerspectiveOrigin<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength>;
+  export type PerspectiveOrigin<TLength = (NonNullableString) | 0> = Globals | DataType.Position<TLength>;
 
-  export type PlaceContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | "baseline" | "normal" | (string & {});
+  export type PlaceContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | "baseline" | "normal" | (NonNullableString);
 
-  export type PlaceItems = Globals | DataType.SelfPosition | "baseline" | "normal" | "stretch" | (string & {});
+  export type PlaceItems = Globals | DataType.SelfPosition | "baseline" | "normal" | "stretch" | (NonNullableString);
 
-  export type PlaceSelf = Globals | DataType.SelfPosition | "auto" | "baseline" | "normal" | "stretch" | (string & {});
+  export type PlaceSelf = Globals | DataType.SelfPosition | "auto" | "baseline" | "normal" | "stretch" | (NonNullableString);
 
   export type PointerEvents = Globals | "all" | "auto" | "fill" | "inherit" | "none" | "painted" | "stroke" | "visible" | "visibleFill" | "visiblePainted" | "visibleStroke";
 
   export type Position = Globals | "-webkit-sticky" | "absolute" | "fixed" | "relative" | "static" | "sticky";
 
-  export type Quotes = Globals | "auto" | "none" | (string & {});
+  export type Quotes = Globals | "auto" | "none" | (NonNullableString);
 
   export type Resize = Globals | "block" | "both" | "horizontal" | "inline" | "none" | "vertical";
 
-  export type Right<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type Right<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type Rotate = Globals | "none" | (string & {});
+  export type Rotate = Globals | "none" | (NonNullableString);
 
-  export type RowGap<TLength = (string & {}) | 0> = Globals | TLength | "normal" | (string & {});
+  export type RowGap<TLength = (NonNullableString) | 0> = Globals | TLength | "normal" | (NonNullableString);
 
   export type RubyAlign = Globals | "center" | "space-around" | "space-between" | "start";
 
   export type RubyMerge = Globals | "auto" | "collapse" | "separate";
 
-  export type RubyPosition = Globals | "alternate" | "inter-character" | "over" | "under" | (string & {});
+  export type RubyPosition = Globals | "alternate" | "inter-character" | "over" | "under" | (NonNullableString);
 
-  export type Scale = Globals | "none" | (string & {}) | (number & {});
+  export type Scale = Globals | "none" | (NonNullableString) | (number & {});
 
   export type ScrollBehavior = Globals | "auto" | "smooth";
 
-  export type ScrollMargin<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type ScrollMargin<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type ScrollMarginBlock<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type ScrollMarginBlock<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type ScrollMarginBlockEnd<TLength = (string & {}) | 0> = Globals | TLength;
+  export type ScrollMarginBlockEnd<TLength = (NonNullableString) | 0> = Globals | TLength;
 
-  export type ScrollMarginBlockStart<TLength = (string & {}) | 0> = Globals | TLength;
+  export type ScrollMarginBlockStart<TLength = (NonNullableString) | 0> = Globals | TLength;
 
-  export type ScrollMarginBottom<TLength = (string & {}) | 0> = Globals | TLength;
+  export type ScrollMarginBottom<TLength = (NonNullableString) | 0> = Globals | TLength;
 
-  export type ScrollMarginInline<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type ScrollMarginInline<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type ScrollMarginInlineEnd<TLength = (string & {}) | 0> = Globals | TLength;
+  export type ScrollMarginInlineEnd<TLength = (NonNullableString) | 0> = Globals | TLength;
 
-  export type ScrollMarginInlineStart<TLength = (string & {}) | 0> = Globals | TLength;
+  export type ScrollMarginInlineStart<TLength = (NonNullableString) | 0> = Globals | TLength;
 
-  export type ScrollMarginLeft<TLength = (string & {}) | 0> = Globals | TLength;
+  export type ScrollMarginLeft<TLength = (NonNullableString) | 0> = Globals | TLength;
 
-  export type ScrollMarginRight<TLength = (string & {}) | 0> = Globals | TLength;
+  export type ScrollMarginRight<TLength = (NonNullableString) | 0> = Globals | TLength;
 
-  export type ScrollMarginTop<TLength = (string & {}) | 0> = Globals | TLength;
+  export type ScrollMarginTop<TLength = (NonNullableString) | 0> = Globals | TLength;
 
-  export type ScrollPadding<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type ScrollPadding<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type ScrollPaddingBlock<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type ScrollPaddingBlock<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type ScrollPaddingBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type ScrollPaddingBlockEnd<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type ScrollPaddingBlockStart<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type ScrollPaddingBlockStart<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type ScrollPaddingBottom<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type ScrollPaddingBottom<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type ScrollPaddingInline<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type ScrollPaddingInline<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type ScrollPaddingInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type ScrollPaddingInlineEnd<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type ScrollPaddingInlineStart<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type ScrollPaddingInlineStart<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type ScrollPaddingLeft<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type ScrollPaddingLeft<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type ScrollPaddingRight<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type ScrollPaddingRight<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type ScrollPaddingTop<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type ScrollPaddingTop<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type ScrollSnapAlign = Globals | "center" | "end" | "none" | "start" | (string & {});
+  export type ScrollSnapAlign = Globals | "center" | "end" | "none" | "start" | (NonNullableString);
 
-  export type ScrollSnapCoordinate<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | "none" | (string & {});
+  export type ScrollSnapCoordinate<TLength = (NonNullableString) | 0> = Globals | DataType.Position<TLength> | "none" | (NonNullableString);
 
-  export type ScrollSnapDestination<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength>;
+  export type ScrollSnapDestination<TLength = (NonNullableString) | 0> = Globals | DataType.Position<TLength>;
 
-  export type ScrollSnapPointsX = Globals | "none" | (string & {});
+  export type ScrollSnapPointsX = Globals | "none" | (NonNullableString);
 
-  export type ScrollSnapPointsY = Globals | "none" | (string & {});
+  export type ScrollSnapPointsY = Globals | "none" | (NonNullableString);
 
   export type ScrollSnapStop = Globals | "always" | "normal";
 
-  export type ScrollSnapType = Globals | "block" | "both" | "inline" | "none" | "x" | "y" | (string & {});
+  export type ScrollSnapType = Globals | "block" | "both" | "inline" | "none" | "x" | "y" | (NonNullableString);
 
   export type ScrollSnapTypeX = Globals | "mandatory" | "none" | "proximity";
 
   export type ScrollSnapTypeY = Globals | "mandatory" | "none" | "proximity";
 
-  export type ScrollTimeline = Globals | "none" | (string & {});
+  export type ScrollTimeline = Globals | "none" | (NonNullableString);
 
-  export type ScrollTimelineAxis = Globals | "block" | "inline" | "x" | "y" | (string & {});
+  export type ScrollTimelineAxis = Globals | "block" | "inline" | "x" | "y" | (NonNullableString);
 
-  export type ScrollTimelineName = Globals | "none" | (string & {});
+  export type ScrollTimelineName = Globals | "none" | (NonNullableString);
 
-  export type ScrollbarColor = Globals | "auto" | (string & {});
+  export type ScrollbarColor = Globals | "auto" | (NonNullableString);
 
-  export type ScrollbarGutter = Globals | "auto" | "stable" | (string & {});
+  export type ScrollbarGutter = Globals | "auto" | "stable" | (NonNullableString);
 
   export type ScrollbarWidth = Globals | "auto" | "none" | "thin";
 
-  export type ShapeImageThreshold = Globals | (string & {}) | (number & {});
+  export type ShapeImageThreshold = Globals | (NonNullableString) | (number & {});
 
-  export type ShapeMargin<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type ShapeMargin<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type ShapeOutside = Globals | DataType.Box | "margin-box" | "none" | (string & {});
+  export type ShapeOutside = Globals | DataType.Box | "margin-box" | "none" | (NonNullableString);
 
-  export type TabSize<TLength = (string & {}) | 0> = Globals | TLength | (number & {}) | (string & {});
+  export type TabSize<TLength = (NonNullableString) | 0> = Globals | TLength | (number & {}) | (NonNullableString);
 
   export type TableLayout = Globals | "auto" | "fixed";
 
@@ -20024,9 +20026,9 @@ export namespace Property {
 
   export type TextAlignLast = Globals | "auto" | "center" | "end" | "justify" | "left" | "right" | "start";
 
-  export type TextCombineUpright = Globals | "all" | "none" | (string & {});
+  export type TextCombineUpright = Globals | "all" | "none" | (NonNullableString);
 
-  export type TextDecoration<TLength = (string & {}) | 0> =
+  export type TextDecoration<TLength = (NonNullableString) | 0> =
     | Globals
     | DataType.Color
     | TLength
@@ -20044,53 +20046,53 @@ export namespace Property {
     | "spelling-error"
     | "underline"
     | "wavy"
-    | (string & {});
+    | (NonNullableString);
 
   export type TextDecorationColor = Globals | DataType.Color;
 
-  export type TextDecorationLine = Globals | "blink" | "grammar-error" | "line-through" | "none" | "overline" | "spelling-error" | "underline" | (string & {});
+  export type TextDecorationLine = Globals | "blink" | "grammar-error" | "line-through" | "none" | "overline" | "spelling-error" | "underline" | (NonNullableString);
 
-  export type TextDecorationSkip = Globals | "box-decoration" | "edges" | "leading-spaces" | "none" | "objects" | "spaces" | "trailing-spaces" | (string & {});
+  export type TextDecorationSkip = Globals | "box-decoration" | "edges" | "leading-spaces" | "none" | "objects" | "spaces" | "trailing-spaces" | (NonNullableString);
 
   export type TextDecorationSkipInk = Globals | "all" | "auto" | "none";
 
   export type TextDecorationStyle = Globals | "dashed" | "dotted" | "double" | "solid" | "wavy";
 
-  export type TextDecorationThickness<TLength = (string & {}) | 0> = Globals | TLength | "auto" | "from-font" | (string & {});
+  export type TextDecorationThickness<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | "from-font" | (NonNullableString);
 
-  export type TextEmphasis = Globals | DataType.Color | "circle" | "dot" | "double-circle" | "filled" | "none" | "open" | "sesame" | "triangle" | (string & {});
+  export type TextEmphasis = Globals | DataType.Color | "circle" | "dot" | "double-circle" | "filled" | "none" | "open" | "sesame" | "triangle" | (NonNullableString);
 
   export type TextEmphasisColor = Globals | DataType.Color;
 
-  export type TextEmphasisPosition = Globals | (string & {});
+  export type TextEmphasisPosition = Globals | (NonNullableString);
 
-  export type TextEmphasisStyle = Globals | "circle" | "dot" | "double-circle" | "filled" | "none" | "open" | "sesame" | "triangle" | (string & {});
+  export type TextEmphasisStyle = Globals | "circle" | "dot" | "double-circle" | "filled" | "none" | "open" | "sesame" | "triangle" | (NonNullableString);
 
-  export type TextIndent<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type TextIndent<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
   export type TextJustify = Globals | "auto" | "inter-character" | "inter-word" | "none";
 
   export type TextOrientation = Globals | "mixed" | "sideways" | "upright";
 
-  export type TextOverflow = Globals | "clip" | "ellipsis" | (string & {});
+  export type TextOverflow = Globals | "clip" | "ellipsis" | (NonNullableString);
 
   export type TextRendering = Globals | "auto" | "geometricPrecision" | "optimizeLegibility" | "optimizeSpeed";
 
-  export type TextShadow = Globals | "none" | (string & {});
+  export type TextShadow = Globals | "none" | (NonNullableString);
 
-  export type TextSizeAdjust = Globals | "auto" | "none" | (string & {});
+  export type TextSizeAdjust = Globals | "auto" | "none" | (NonNullableString);
 
   export type TextTransform = Globals | "capitalize" | "full-size-kana" | "full-width" | "lowercase" | "none" | "uppercase";
 
-  export type TextUnderlineOffset<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type TextUnderlineOffset<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type TextUnderlinePosition = Globals | "auto" | "from-font" | "left" | "right" | "under" | (string & {});
+  export type TextUnderlinePosition = Globals | "auto" | "from-font" | "left" | "right" | "under" | (NonNullableString);
 
   export type TextWrap = Globals | "balance" | "nowrap" | "pretty" | "stable" | "wrap";
 
-  export type TimelineScope = Globals | "none" | (string & {});
+  export type TimelineScope = Globals | "none" | (NonNullableString);
 
-  export type Top<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type Top<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
   export type TouchAction =
     | Globals
@@ -20107,29 +20109,29 @@ export namespace Property {
     | "pan-x"
     | "pan-y"
     | "pinch-zoom"
-    | (string & {});
+    | (NonNullableString);
 
-  export type Transform = Globals | "none" | (string & {});
+  export type Transform = Globals | "none" | (NonNullableString);
 
   export type TransformBox = Globals | "border-box" | "content-box" | "fill-box" | "stroke-box" | "view-box";
 
-  export type TransformOrigin<TLength = (string & {}) | 0> = Globals | TLength | "bottom" | "center" | "left" | "right" | "top" | (string & {});
+  export type TransformOrigin<TLength = (NonNullableString) | 0> = Globals | TLength | "bottom" | "center" | "left" | "right" | "top" | (NonNullableString);
 
   export type TransformStyle = Globals | "flat" | "preserve-3d";
 
-  export type Transition<TTime = string & {}> = Globals | DataType.SingleTransition<TTime> | (string & {});
+  export type Transition<TTime = NonNullableString> = Globals | DataType.SingleTransition<TTime> | (NonNullableString);
 
-  export type TransitionBehavior = Globals | "allow-discrete" | "normal" | (string & {});
+  export type TransitionBehavior = Globals | "allow-discrete" | "normal" | (NonNullableString);
 
-  export type TransitionDelay<TTime = string & {}> = Globals | TTime | (string & {});
+  export type TransitionDelay<TTime = NonNullableString> = Globals | TTime | (NonNullableString);
 
-  export type TransitionDuration<TTime = string & {}> = Globals | TTime | (string & {});
+  export type TransitionDuration<TTime = NonNullableString> = Globals | TTime | (NonNullableString);
 
-  export type TransitionProperty = Globals | "all" | "none" | (string & {});
+  export type TransitionProperty = Globals | "all" | "none" | (NonNullableString);
 
-  export type TransitionTimingFunction = Globals | DataType.EasingFunction | (string & {});
+  export type TransitionTimingFunction = Globals | DataType.EasingFunction | (NonNullableString);
 
-  export type Translate<TLength = (string & {}) | 0> = Globals | TLength | "none" | (string & {});
+  export type Translate<TLength = (NonNullableString) | 0> = Globals | TLength | "none" | (NonNullableString);
 
   export type UnicodeBidi =
     | Globals
@@ -20148,7 +20150,7 @@ export namespace Property {
 
   export type UserSelect = Globals | "-moz-none" | "all" | "auto" | "contain" | "element" | "none" | "text";
 
-  export type VerticalAlign<TLength = (string & {}) | 0> =
+  export type VerticalAlign<TLength = (NonNullableString) | 0> =
     | Globals
     | TLength
     | "baseline"
@@ -20159,17 +20161,17 @@ export namespace Property {
     | "text-bottom"
     | "text-top"
     | "top"
-    | (string & {});
+    | (NonNullableString);
 
-  export type ViewTimeline = Globals | "none" | (string & {});
+  export type ViewTimeline = Globals | "none" | (NonNullableString);
 
-  export type ViewTimelineAxis = Globals | "block" | "inline" | "x" | "y" | (string & {});
+  export type ViewTimelineAxis = Globals | "block" | "inline" | "x" | "y" | (NonNullableString);
 
-  export type ViewTimelineInset<TLength = (string & {}) | 0> = Globals | TLength | "auto" | (string & {});
+  export type ViewTimelineInset<TLength = (NonNullableString) | 0> = Globals | TLength | "auto" | (NonNullableString);
 
-  export type ViewTimelineName = Globals | "none" | (string & {});
+  export type ViewTimelineName = Globals | "none" | (NonNullableString);
 
-  export type ViewTransitionName = Globals | "none" | (string & {});
+  export type ViewTransitionName = Globals | "none" | (NonNullableString);
 
   export type Visibility = Globals | "collapse" | "hidden" | "visible";
 
@@ -20195,15 +20197,15 @@ export namespace Property {
     | "pretty"
     | "stable"
     | "wrap"
-    | (string & {});
+    | (NonNullableString);
 
   export type WhiteSpaceCollapse = Globals | "break-spaces" | "collapse" | "discard" | "preserve" | "preserve-breaks" | "preserve-spaces";
 
-  export type WhiteSpaceTrim = Globals | "discard-after" | "discard-before" | "discard-inner" | "none" | (string & {});
+  export type WhiteSpaceTrim = Globals | "discard-after" | "discard-before" | "discard-inner" | "none" | (NonNullableString);
 
-  export type Widows = Globals | (number & {}) | (string & {});
+  export type Widows = Globals | (number & {}) | (NonNullableString);
 
-  export type Width<TLength = (string & {}) | 0> =
+  export type Width<TLength = (NonNullableString) | 0> =
     | Globals
     | TLength
     | "-moz-fit-content"
@@ -20217,21 +20219,21 @@ export namespace Property {
     | "max-content"
     | "min-content"
     | "min-intrinsic"
-    | (string & {});
+    | (NonNullableString);
 
-  export type WillChange = Globals | DataType.AnimateableFeature | "auto" | (string & {});
+  export type WillChange = Globals | DataType.AnimateableFeature | "auto" | (NonNullableString);
 
   export type WordBreak = Globals | "break-all" | "break-word" | "keep-all" | "normal";
 
-  export type WordSpacing<TLength = (string & {}) | 0> = Globals | TLength | "normal";
+  export type WordSpacing<TLength = (NonNullableString) | 0> = Globals | TLength | "normal";
 
   export type WordWrap = Globals | "break-word" | "normal";
 
   export type WritingMode = Globals | "horizontal-tb" | "sideways-lr" | "sideways-rl" | "vertical-lr" | "vertical-rl";
 
-  export type ZIndex = Globals | "auto" | (number & {}) | (string & {});
+  export type ZIndex = Globals | "auto" | (number & {}) | (NonNullableString);
 
-  export type Zoom = Globals | "normal" | "reset" | (string & {}) | (number & {});
+  export type Zoom = Globals | "normal" | "reset" | (NonNullableString) | (number & {});
 
   export type MozAppearance =
     | Globals
@@ -20346,35 +20348,35 @@ export namespace Property {
     | "treetwistyopen"
     | "treeview";
 
-  export type MozBinding = Globals | "none" | (string & {});
+  export type MozBinding = Globals | "none" | (NonNullableString);
 
-  export type MozBorderBottomColors = Globals | DataType.Color | "none" | (string & {});
+  export type MozBorderBottomColors = Globals | DataType.Color | "none" | (NonNullableString);
 
-  export type MozBorderLeftColors = Globals | DataType.Color | "none" | (string & {});
+  export type MozBorderLeftColors = Globals | DataType.Color | "none" | (NonNullableString);
 
-  export type MozBorderRightColors = Globals | DataType.Color | "none" | (string & {});
+  export type MozBorderRightColors = Globals | DataType.Color | "none" | (NonNullableString);
 
-  export type MozBorderTopColors = Globals | DataType.Color | "none" | (string & {});
+  export type MozBorderTopColors = Globals | DataType.Color | "none" | (NonNullableString);
 
-  export type MozContextProperties = Globals | "fill" | "fill-opacity" | "none" | "stroke" | "stroke-opacity" | (string & {});
+  export type MozContextProperties = Globals | "fill" | "fill-opacity" | "none" | "stroke" | "stroke-opacity" | (NonNullableString);
 
   export type MozFloatEdge = Globals | "border-box" | "content-box" | "margin-box" | "padding-box";
 
-  export type MozForceBrokenImageIcon = Globals | 0 | (string & {}) | 1;
+  export type MozForceBrokenImageIcon = Globals | 0 | (NonNullableString) | 1;
 
-  export type MozImageRegion = Globals | "auto" | (string & {});
+  export type MozImageRegion = Globals | "auto" | (NonNullableString);
 
   export type MozOrient = Globals | "block" | "horizontal" | "inline" | "vertical";
 
-  export type MozOutlineRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type MozOutlineRadius<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type MozOutlineRadiusBottomleft<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type MozOutlineRadiusBottomleft<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type MozOutlineRadiusBottomright<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type MozOutlineRadiusBottomright<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type MozOutlineRadiusTopleft<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type MozOutlineRadiusTopleft<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
-  export type MozOutlineRadiusTopright<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type MozOutlineRadiusTopright<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
   export type MozStackSizing = Globals | "ignore" | "stretch-to-fit";
 
@@ -20396,37 +20398,37 @@ export namespace Property {
 
   export type MsContentZoomChaining = Globals | "chained" | "none";
 
-  export type MsContentZoomLimit = Globals | (string & {});
+  export type MsContentZoomLimit = Globals | (NonNullableString);
 
-  export type MsContentZoomLimitMax = Globals | (string & {});
+  export type MsContentZoomLimitMax = Globals | (NonNullableString);
 
-  export type MsContentZoomLimitMin = Globals | (string & {});
+  export type MsContentZoomLimitMin = Globals | (NonNullableString);
 
-  export type MsContentZoomSnap = Globals | "mandatory" | "none" | "proximity" | (string & {});
+  export type MsContentZoomSnap = Globals | "mandatory" | "none" | "proximity" | (NonNullableString);
 
-  export type MsContentZoomSnapPoints = Globals | (string & {});
+  export type MsContentZoomSnapPoints = Globals | (NonNullableString);
 
   export type MsContentZoomSnapType = Globals | "mandatory" | "none" | "proximity";
 
   export type MsContentZooming = Globals | "none" | "zoom";
 
-  export type MsFilter = Globals | (string & {});
+  export type MsFilter = Globals | (NonNullableString);
 
-  export type MsFlowFrom = Globals | "none" | (string & {});
+  export type MsFlowFrom = Globals | "none" | (NonNullableString);
 
-  export type MsFlowInto = Globals | "none" | (string & {});
+  export type MsFlowInto = Globals | "none" | (NonNullableString);
 
-  export type MsGridColumns<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | "none" | (string & {});
+  export type MsGridColumns<TLength = (NonNullableString) | 0> = Globals | DataType.TrackBreadth<TLength> | "none" | (NonNullableString);
 
-  export type MsGridRows<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | "none" | (string & {});
+  export type MsGridRows<TLength = (NonNullableString) | 0> = Globals | DataType.TrackBreadth<TLength> | "none" | (NonNullableString);
 
   export type MsHighContrastAdjust = Globals | "auto" | "none";
 
-  export type MsHyphenateLimitChars = Globals | "auto" | (string & {}) | (number & {});
+  export type MsHyphenateLimitChars = Globals | "auto" | (NonNullableString) | (number & {});
 
-  export type MsHyphenateLimitLines = Globals | "no-limit" | (number & {}) | (string & {});
+  export type MsHyphenateLimitLines = Globals | "no-limit" | (number & {}) | (NonNullableString);
 
-  export type MsHyphenateLimitZone<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type MsHyphenateLimitZone<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
   export type MsImeAlign = Globals | "after" | "auto";
 
@@ -20434,27 +20436,27 @@ export namespace Property {
 
   export type MsScrollChaining = Globals | "chained" | "none";
 
-  export type MsScrollLimit = Globals | (string & {});
+  export type MsScrollLimit = Globals | (NonNullableString);
 
-  export type MsScrollLimitXMax<TLength = (string & {}) | 0> = Globals | TLength | "auto";
+  export type MsScrollLimitXMax<TLength = (NonNullableString) | 0> = Globals | TLength | "auto";
 
-  export type MsScrollLimitXMin<TLength = (string & {}) | 0> = Globals | TLength;
+  export type MsScrollLimitXMin<TLength = (NonNullableString) | 0> = Globals | TLength;
 
-  export type MsScrollLimitYMax<TLength = (string & {}) | 0> = Globals | TLength | "auto";
+  export type MsScrollLimitYMax<TLength = (NonNullableString) | 0> = Globals | TLength | "auto";
 
-  export type MsScrollLimitYMin<TLength = (string & {}) | 0> = Globals | TLength;
+  export type MsScrollLimitYMin<TLength = (NonNullableString) | 0> = Globals | TLength;
 
   export type MsScrollRails = Globals | "none" | "railed";
 
-  export type MsScrollSnapPointsX = Globals | (string & {});
+  export type MsScrollSnapPointsX = Globals | (NonNullableString);
 
-  export type MsScrollSnapPointsY = Globals | (string & {});
+  export type MsScrollSnapPointsY = Globals | (NonNullableString);
 
   export type MsScrollSnapType = Globals | "mandatory" | "none" | "proximity";
 
-  export type MsScrollSnapX = Globals | (string & {});
+  export type MsScrollSnapX = Globals | (NonNullableString);
 
-  export type MsScrollSnapY = Globals | (string & {});
+  export type MsScrollSnapY = Globals | (NonNullableString);
 
   export type MsScrollTranslation = Globals | "none" | "vertical-to-horizontal";
 
@@ -20482,7 +20484,7 @@ export namespace Property {
 
   export type MsWrapFlow = Globals | "auto" | "both" | "clear" | "end" | "maximum" | "start";
 
-  export type MsWrapMargin<TLength = (string & {}) | 0> = Globals | TLength;
+  export type MsWrapMargin<TLength = (NonNullableString) | 0> = Globals | TLength;
 
   export type MsWrapThrough = Globals | "none" | "wrap";
 
@@ -20538,19 +20540,19 @@ export namespace Property {
     | "textarea"
     | "textfield";
 
-  export type WebkitBorderBefore<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});
+  export type WebkitBorderBefore<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (NonNullableString);
 
   export type WebkitBorderBeforeColor = Globals | DataType.Color;
 
-  export type WebkitBorderBeforeStyle = Globals | DataType.LineStyle | (string & {});
+  export type WebkitBorderBeforeStyle = Globals | DataType.LineStyle | (NonNullableString);
 
-  export type WebkitBorderBeforeWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | (string & {});
+  export type WebkitBorderBeforeWidth<TLength = (NonNullableString) | 0> = Globals | DataType.LineWidth<TLength> | (NonNullableString);
 
-  export type WebkitBoxReflect<TLength = (string & {}) | 0> = Globals | TLength | "above" | "below" | "left" | "right" | (string & {});
+  export type WebkitBoxReflect<TLength = (NonNullableString) | 0> = Globals | TLength | "above" | "below" | "left" | "right" | (NonNullableString);
 
-  export type WebkitLineClamp = Globals | "none" | (number & {}) | (string & {});
+  export type WebkitLineClamp = Globals | "none" | (number & {}) | (NonNullableString);
 
-  export type WebkitMask<TLength = (string & {}) | 0> =
+  export type WebkitMask<TLength = (NonNullableString) | 0> =
     | Globals
     | DataType.Position<TLength>
     | DataType.RepeatStyle
@@ -20560,31 +20562,31 @@ export namespace Property {
     | "none"
     | "padding"
     | "text"
-    | (string & {});
+    | (NonNullableString);
 
-  export type WebkitMaskAttachment = Globals | DataType.Attachment | (string & {});
+  export type WebkitMaskAttachment = Globals | DataType.Attachment | (NonNullableString);
 
-  export type WebkitMaskClip = Globals | DataType.Box | "border" | "content" | "padding" | "text" | (string & {});
+  export type WebkitMaskClip = Globals | DataType.Box | "border" | "content" | "padding" | "text" | (NonNullableString);
 
-  export type WebkitMaskComposite = Globals | DataType.CompositeStyle | (string & {});
+  export type WebkitMaskComposite = Globals | DataType.CompositeStyle | (NonNullableString);
 
-  export type WebkitMaskImage = Globals | "none" | (string & {});
+  export type WebkitMaskImage = Globals | "none" | (NonNullableString);
 
-  export type WebkitMaskOrigin = Globals | DataType.Box | "border" | "content" | "padding" | (string & {});
+  export type WebkitMaskOrigin = Globals | DataType.Box | "border" | "content" | "padding" | (NonNullableString);
 
-  export type WebkitMaskPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | (string & {});
+  export type WebkitMaskPosition<TLength = (NonNullableString) | 0> = Globals | DataType.Position<TLength> | (NonNullableString);
 
-  export type WebkitMaskPositionX<TLength = (string & {}) | 0> = Globals | TLength | "center" | "left" | "right" | (string & {});
+  export type WebkitMaskPositionX<TLength = (NonNullableString) | 0> = Globals | TLength | "center" | "left" | "right" | (NonNullableString);
 
-  export type WebkitMaskPositionY<TLength = (string & {}) | 0> = Globals | TLength | "bottom" | "center" | "top" | (string & {});
+  export type WebkitMaskPositionY<TLength = (NonNullableString) | 0> = Globals | TLength | "bottom" | "center" | "top" | (NonNullableString);
 
-  export type WebkitMaskRepeat = Globals | DataType.RepeatStyle | (string & {});
+  export type WebkitMaskRepeat = Globals | DataType.RepeatStyle | (NonNullableString);
 
   export type WebkitMaskRepeatX = Globals | "no-repeat" | "repeat" | "round" | "space";
 
   export type WebkitMaskRepeatY = Globals | "no-repeat" | "repeat" | "round" | "space";
 
-  export type WebkitMaskSize<TLength = (string & {}) | 0> = Globals | DataType.BgSize<TLength> | (string & {});
+  export type WebkitMaskSize<TLength = (NonNullableString) | 0> = Globals | DataType.BgSize<TLength> | (NonNullableString);
 
   export type WebkitOverflowScrolling = Globals | "auto" | "touch";
 
@@ -20592,11 +20594,11 @@ export namespace Property {
 
   export type WebkitTextFillColor = Globals | DataType.Color;
 
-  export type WebkitTextStroke<TLength = (string & {}) | 0> = Globals | DataType.Color | TLength | (string & {});
+  export type WebkitTextStroke<TLength = (NonNullableString) | 0> = Globals | DataType.Color | TLength | (NonNullableString);
 
   export type WebkitTextStrokeColor = Globals | DataType.Color;
 
-  export type WebkitTextStrokeWidth<TLength = (string & {}) | 0> = Globals | TLength;
+  export type WebkitTextStrokeWidth<TLength = (NonNullableString) | 0> = Globals | TLength;
 
   export type WebkitTouchCallout = Globals | "default" | "none";
 
@@ -20617,7 +20619,7 @@ export namespace Property {
     | "text-after-edge"
     | "text-before-edge";
 
-  export type BaselineShift<TLength = (string & {}) | 0> = Globals | TLength | "baseline" | "sub" | "super" | (string & {});
+  export type BaselineShift<TLength = (NonNullableString) | 0> = Globals | TLength | "baseline" | "sub" | "super" | (NonNullableString);
 
   export type ClipRule = Globals | "evenodd" | "nonzero";
 
@@ -20642,47 +20644,47 @@ export namespace Property {
 
   export type Fill = Globals | DataType.Paint;
 
-  export type FillOpacity = Globals | (number & {}) | (string & {});
+  export type FillOpacity = Globals | (number & {}) | (NonNullableString);
 
   export type FillRule = Globals | "evenodd" | "nonzero";
 
   export type FloodColor = Globals | DataType.Color | "currentColor";
 
-  export type FloodOpacity = Globals | (number & {}) | (string & {});
+  export type FloodOpacity = Globals | (number & {}) | (NonNullableString);
 
-  export type GlyphOrientationVertical = Globals | "auto" | (string & {}) | (number & {});
+  export type GlyphOrientationVertical = Globals | "auto" | (NonNullableString) | (number & {});
 
   export type LightingColor = Globals | DataType.Color | "currentColor";
 
-  export type Marker = Globals | "none" | (string & {});
+  export type Marker = Globals | "none" | (NonNullableString);
 
-  export type MarkerEnd = Globals | "none" | (string & {});
+  export type MarkerEnd = Globals | "none" | (NonNullableString);
 
-  export type MarkerMid = Globals | "none" | (string & {});
+  export type MarkerMid = Globals | "none" | (NonNullableString);
 
-  export type MarkerStart = Globals | "none" | (string & {});
+  export type MarkerStart = Globals | "none" | (NonNullableString);
 
   export type ShapeRendering = Globals | "auto" | "crispEdges" | "geometricPrecision" | "optimizeSpeed";
 
   export type StopColor = Globals | DataType.Color | "currentColor";
 
-  export type StopOpacity = Globals | (number & {}) | (string & {});
+  export type StopOpacity = Globals | (number & {}) | (NonNullableString);
 
   export type Stroke = Globals | DataType.Paint;
 
-  export type StrokeDasharray<TLength = (string & {}) | 0> = Globals | DataType.Dasharray<TLength> | "none";
+  export type StrokeDasharray<TLength = (NonNullableString) | 0> = Globals | DataType.Dasharray<TLength> | "none";
 
-  export type StrokeDashoffset<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type StrokeDashoffset<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
   export type StrokeLinecap = Globals | "butt" | "round" | "square";
 
   export type StrokeLinejoin = Globals | "bevel" | "miter" | "round";
 
-  export type StrokeMiterlimit = Globals | (number & {}) | (string & {});
+  export type StrokeMiterlimit = Globals | (number & {}) | (NonNullableString);
 
-  export type StrokeOpacity = Globals | (number & {}) | (string & {});
+  export type StrokeOpacity = Globals | (number & {}) | (NonNullableString);
 
-  export type StrokeWidth<TLength = (string & {}) | 0> = Globals | TLength | (string & {});
+  export type StrokeWidth<TLength = (NonNullableString) | 0> = Globals | TLength | (NonNullableString);
 
   export type TextAnchor = Globals | "end" | "middle" | "start";
 
@@ -20690,7 +20692,7 @@ export namespace Property {
 }
 
 export namespace AtRule {
-  export interface CounterStyle<TLength = (string & {}) | 0, TTime = string & {}> {
+  export interface CounterStyle<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
     additiveSymbols?: string | undefined;
     fallback?: string | undefined;
     negative?: string | undefined;
@@ -20703,7 +20705,7 @@ export namespace AtRule {
     system?: System | undefined;
   }
 
-  export interface CounterStyleHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
+  export interface CounterStyleHyphen<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
     "additive-symbols"?: string | undefined;
     fallback?: string | undefined;
     negative?: string | undefined;
@@ -20716,11 +20718,11 @@ export namespace AtRule {
     system?: System | undefined;
   }
 
-  export type CounterStyleFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<CounterStyle<TLength, TTime>>;
+  export type CounterStyleFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<CounterStyle<TLength, TTime>>;
 
-  export type CounterStyleHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<CounterStyleHyphen<TLength, TTime>>;
+  export type CounterStyleHyphenFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<CounterStyleHyphen<TLength, TTime>>;
 
-  export interface FontFace<TLength = (string & {}) | 0, TTime = string & {}> {
+  export interface FontFace<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
     MozFontFeatureSettings?: FontFeatureSettings | undefined;
     ascentOverride?: AscentOverride | undefined;
     descentOverride?: DescentOverride | undefined;
@@ -20738,7 +20740,7 @@ export namespace AtRule {
     unicodeRange?: string | undefined;
   }
 
-  export interface FontFaceHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
+  export interface FontFaceHyphen<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
     "-moz-font-feature-settings"?: FontFeatureSettings | undefined;
     "ascent-override"?: AscentOverride | undefined;
     "descent-override"?: DescentOverride | undefined;
@@ -20756,61 +20758,61 @@ export namespace AtRule {
     "unicode-range"?: string | undefined;
   }
 
-  export type FontFaceFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontFace<TLength, TTime>>;
+  export type FontFaceFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<FontFace<TLength, TTime>>;
 
-  export type FontFaceHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontFaceHyphen<TLength, TTime>>;
+  export type FontFaceHyphenFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<FontFaceHyphen<TLength, TTime>>;
 
-  export interface FontPaletteValues<TLength = (string & {}) | 0, TTime = string & {}> {
+  export interface FontPaletteValues<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
     basePalette?: BasePalette | undefined;
     fontFamily?: string | undefined;
     overrideColors?: string | undefined;
   }
 
-  export interface FontPaletteValuesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
+  export interface FontPaletteValuesHyphen<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
     "base-palette"?: BasePalette | undefined;
     "font-family"?: string | undefined;
     "override-colors"?: string | undefined;
   }
 
-  export type FontPaletteValuesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontPaletteValues<TLength, TTime>>;
+  export type FontPaletteValuesFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<FontPaletteValues<TLength, TTime>>;
 
-  export type FontPaletteValuesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontPaletteValuesHyphen<TLength, TTime>>;
+  export type FontPaletteValuesHyphenFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<FontPaletteValuesHyphen<TLength, TTime>>;
 
-  export interface Page<TLength = (string & {}) | 0, TTime = string & {}> {
+  export interface Page<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
     bleed?: Bleed<TLength> | undefined;
     marks?: Marks | undefined;
     pageOrientation?: PageOrientation | undefined;
     size?: Size<TLength> | undefined;
   }
 
-  export interface PageHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
+  export interface PageHyphen<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
     bleed?: Bleed<TLength> | undefined;
     marks?: Marks | undefined;
     "page-orientation"?: PageOrientation | undefined;
     size?: Size<TLength> | undefined;
   }
 
-  export type PageFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<Page<TLength, TTime>>;
+  export type PageFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<Page<TLength, TTime>>;
 
-  export type PageHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<PageHyphen<TLength, TTime>>;
+  export type PageHyphenFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<PageHyphen<TLength, TTime>>;
 
-  export interface Property<TLength = (string & {}) | 0, TTime = string & {}> {
+  export interface Property<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
     inherits?: Inherits | undefined;
     initialValue?: string | undefined;
     syntax?: string | undefined;
   }
 
-  export interface PropertyHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
+  export interface PropertyHyphen<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
     inherits?: Inherits | undefined;
     "initial-value"?: string | undefined;
     syntax?: string | undefined;
   }
 
-  export type PropertyFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<Property<TLength, TTime>>;
+  export type PropertyFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<Property<TLength, TTime>>;
 
-  export type PropertyHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<PropertyHyphen<TLength, TTime>>;
+  export type PropertyHyphenFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<PropertyHyphen<TLength, TTime>>;
 
-  export interface Viewport<TLength = (string & {}) | 0, TTime = string & {}> {
+  export interface Viewport<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
     height?: Height<TLength> | undefined;
     maxHeight?: MaxHeight<TLength> | undefined;
     maxWidth?: MaxWidth<TLength> | undefined;
@@ -20825,7 +20827,7 @@ export namespace AtRule {
     zoom?: Zoom | undefined;
   }
 
-  export interface ViewportHyphen<TLength = (string & {}) | 0, TTime = string & {}> {
+  export interface ViewportHyphen<TLength = (NonNullableString) | 0, TTime = NonNullableString> {
     height?: Height<TLength> | undefined;
     "max-height"?: MaxHeight<TLength> | undefined;
     "max-width"?: MaxWidth<TLength> | undefined;
@@ -20840,27 +20842,27 @@ export namespace AtRule {
     zoom?: Zoom | undefined;
   }
 
-  export type ViewportFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<Viewport<TLength, TTime>>;
+  export type ViewportFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<Viewport<TLength, TTime>>;
 
-  export type ViewportHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<ViewportHyphen<TLength, TTime>>;
+  export type ViewportHyphenFallback<TLength = (NonNullableString) | 0, TTime = NonNullableString> = Fallback<ViewportHyphen<TLength, TTime>>;
 
-  type Range = "auto" | (string & {});
+  type Range = "auto" | (NonNullableString);
 
-  type SpeakAs = "auto" | "bullets" | "numbers" | "spell-out" | "words" | (string & {});
+  type SpeakAs = "auto" | "bullets" | "numbers" | "spell-out" | "words" | (NonNullableString);
 
-  type System = "additive" | "alphabetic" | "cyclic" | "fixed" | "numeric" | "symbolic" | (string & {});
+  type System = "additive" | "alphabetic" | "cyclic" | "fixed" | "numeric" | "symbolic" | (NonNullableString);
 
-  type FontFeatureSettings = "normal" | (string & {});
+  type FontFeatureSettings = "normal" | (NonNullableString);
 
-  type AscentOverride = "normal" | (string & {});
+  type AscentOverride = "normal" | (NonNullableString);
 
-  type DescentOverride = "normal" | (string & {});
+  type DescentOverride = "normal" | (NonNullableString);
 
   type FontDisplay = "auto" | "block" | "fallback" | "optional" | "swap";
 
-  type FontStretch = DataType.FontStretchAbsolute | (string & {});
+  type FontStretch = DataType.FontStretchAbsolute | (NonNullableString);
 
-  type FontStyle = "italic" | "normal" | "oblique" | (string & {});
+  type FontStyle = "italic" | "normal" | "oblique" | (NonNullableString);
 
   type FontVariant =
     | DataType.EastAsianVariantValues
@@ -20892,39 +20894,39 @@ export namespace AtRule {
     | "tabular-nums"
     | "titling-caps"
     | "unicase"
-    | (string & {});
+    | (NonNullableString);
 
-  type FontVariationSettings = "normal" | (string & {});
+  type FontVariationSettings = "normal" | (NonNullableString);
 
-  type FontWeight = DataType.FontWeightAbsolute | (string & {});
+  type FontWeight = DataType.FontWeightAbsolute | (NonNullableString);
 
-  type LineGapOverride = "normal" | (string & {});
+  type LineGapOverride = "normal" | (NonNullableString);
 
-  type BasePalette = "dark" | "light" | (number & {}) | (string & {});
+  type BasePalette = "dark" | "light" | (number & {}) | (NonNullableString);
 
   type Bleed<TLength> = TLength | "auto";
 
-  type Marks = "crop" | "cross" | "none" | (string & {});
+  type Marks = "crop" | "cross" | "none" | (NonNullableString);
 
   type PageOrientation = "rotate-left" | "rotate-right" | "upright";
 
-  type Size<TLength> = DataType.PageSize | TLength | "auto" | "landscape" | "portrait" | (string & {});
+  type Size<TLength> = DataType.PageSize | TLength | "auto" | "landscape" | "portrait" | (NonNullableString);
 
   type Inherits = "false" | "true";
 
-  type Height<TLength> = DataType.ViewportLength<TLength> | (string & {});
+  type Height<TLength> = DataType.ViewportLength<TLength> | (NonNullableString);
 
   type MaxHeight<TLength> = DataType.ViewportLength<TLength>;
 
   type MaxWidth<TLength> = DataType.ViewportLength<TLength>;
 
-  type MaxZoom = "auto" | (string & {}) | (number & {});
+  type MaxZoom = "auto" | (NonNullableString) | (number & {});
 
   type MinHeight<TLength> = DataType.ViewportLength<TLength>;
 
   type MinWidth<TLength> = DataType.ViewportLength<TLength>;
 
-  type MinZoom = "auto" | (string & {}) | (number & {});
+  type MinZoom = "auto" | (NonNullableString) | (number & {});
 
   type Orientation = "auto" | "landscape" | "portrait";
 
@@ -20932,9 +20934,9 @@ export namespace AtRule {
 
   type ViewportFit = "auto" | "contain" | "cover";
 
-  type Width<TLength> = DataType.ViewportLength<TLength> | (string & {});
+  type Width<TLength> = DataType.ViewportLength<TLength> | (NonNullableString);
 
-  type Zoom = "auto" | (string & {}) | (number & {});
+  type Zoom = "auto" | (NonNullableString) | (number & {});
 }
 
 /**
@@ -20946,13 +20948,13 @@ export namespace AtRule {
 export namespace DataType {
   type AbsoluteSize = "large" | "medium" | "small" | "x-large" | "x-small" | "xx-large" | "xx-small" | "xxx-large";
 
-  type AnimateableFeature = "contents" | "scroll-position" | (string & {});
+  type AnimateableFeature = "contents" | "scroll-position" | (NonNullableString);
 
   type Attachment = "fixed" | "local" | "scroll";
 
-  type BgPosition<TLength> = TLength | "bottom" | "center" | "left" | "right" | "top" | (string & {});
+  type BgPosition<TLength> = TLength | "bottom" | "center" | "left" | "right" | "top" | (NonNullableString);
 
-  type BgSize<TLength> = TLength | "auto" | "contain" | "cover" | (string & {});
+  type BgSize<TLength> = TLength | "auto" | "contain" | "cover" | (NonNullableString);
 
   type BlendMode =
     | "color"
@@ -20974,7 +20976,7 @@ export namespace DataType {
 
   type Box = "border-box" | "content-box" | "padding-box";
 
-  type Color = NamedColor | DeprecatedSystemColor | "currentcolor" | (string & {});
+  type Color = NamedColor | DeprecatedSystemColor | "currentcolor" | (NonNullableString);
 
   type CompatAuto =
     | "button"
@@ -21007,13 +21009,13 @@ export namespace DataType {
 
   type ContentDistribution = "space-around" | "space-between" | "space-evenly" | "stretch";
 
-  type ContentList = Quote | "contents" | (string & {});
+  type ContentList = Quote | "contents" | (NonNullableString);
 
   type ContentPosition = "center" | "end" | "flex-end" | "flex-start" | "start";
 
-  type CubicBezierTimingFunction = "ease" | "ease-in" | "ease-in-out" | "ease-out" | (string & {});
+  type CubicBezierTimingFunction = "ease" | "ease-in" | "ease-in-out" | "ease-out" | (NonNullableString);
 
-  type Dasharray<TLength> = TLength | (string & {}) | (number & {});
+  type Dasharray<TLength> = TLength | (NonNullableString) | (number & {});
 
   type DeprecatedSystemColor =
     | "ActiveBorder"
@@ -21069,7 +21071,7 @@ export namespace DataType {
 
   type EastAsianVariantValues = "jis04" | "jis78" | "jis83" | "jis90" | "simplified" | "traditional";
 
-  type FinalBgLayer<TLength> = Color | BgPosition<TLength> | RepeatStyle | Attachment | Box | "none" | (string & {});
+  type FinalBgLayer<TLength> = Color | BgPosition<TLength> | RepeatStyle | Attachment | Box | "none" | (NonNullableString);
 
   type FontStretchAbsolute =
     | "condensed"
@@ -21081,21 +21083,21 @@ export namespace DataType {
     | "semi-expanded"
     | "ultra-condensed"
     | "ultra-expanded"
-    | (string & {});
+    | (NonNullableString);
 
-  type FontWeightAbsolute = "bold" | "normal" | (number & {}) | (string & {});
+  type FontWeightAbsolute = "bold" | "normal" | (number & {}) | (NonNullableString);
 
   type GenericFamily = "cursive" | "fantasy" | "monospace" | "sans-serif" | "serif";
 
   type GeometryBox = Box | "fill-box" | "margin-box" | "stroke-box" | "view-box";
 
-  type GridLine = "auto" | (string & {}) | (number & {});
+  type GridLine = "auto" | (NonNullableString) | (number & {});
 
   type LineStyle = "dashed" | "dotted" | "double" | "groove" | "hidden" | "inset" | "none" | "outset" | "ridge" | "solid";
 
   type LineWidth<TLength> = TLength | "medium" | "thick" | "thin";
 
-  type MaskLayer<TLength> = Position<TLength> | RepeatStyle | GeometryBox | CompositingOperator | MaskingMode | "no-clip" | "none" | (string & {});
+  type MaskLayer<TLength> = Position<TLength> | RepeatStyle | GeometryBox | CompositingOperator | MaskingMode | "no-clip" | "none" | (NonNullableString);
 
   type MaskingMode = "alpha" | "luminance" | "match-source";
 
@@ -21252,13 +21254,13 @@ export namespace DataType {
 
   type PageSize = "A3" | "A4" | "A5" | "B4" | "B5" | "JIS-B4" | "JIS-B5" | "ledger" | "legal" | "letter";
 
-  type Paint = Color | "child" | "context-fill" | "context-stroke" | "none" | (string & {});
+  type Paint = Color | "child" | "context-fill" | "context-stroke" | "none" | (NonNullableString);
 
-  type Position<TLength> = TLength | "bottom" | "center" | "left" | "right" | "top" | (string & {});
+  type Position<TLength> = TLength | "bottom" | "center" | "left" | "right" | "top" | (NonNullableString);
 
   type Quote = "close-quote" | "no-close-quote" | "no-open-quote" | "open-quote";
 
-  type RepeatStyle = "no-repeat" | "repeat" | "repeat-x" | "repeat-y" | "round" | "space" | (string & {});
+  type RepeatStyle = "no-repeat" | "repeat" | "repeat-x" | "repeat-y" | "round" | "space" | (NonNullableString);
 
   type SelfPosition = "center" | "end" | "flex-end" | "flex-start" | "self-end" | "self-start" | "start";
 
@@ -21272,7 +21274,7 @@ export namespace DataType {
     | "none"
     | "paused"
     | "running"
-    | (string & {})
+    | (NonNullableString)
     | (number & {});
 
   type SingleAnimationComposition = "accumulate" | "add" | "replace";
@@ -21281,17 +21283,17 @@ export namespace DataType {
 
   type SingleAnimationFillMode = "backwards" | "both" | "forwards" | "none";
 
-  type SingleAnimationTimeline = "auto" | "none" | (string & {});
+  type SingleAnimationTimeline = "auto" | "none" | (NonNullableString);
 
-  type SingleTransition<TTime> = EasingFunction | TTime | "all" | "allow-discrete" | "none" | "normal" | (string & {});
+  type SingleTransition<TTime> = EasingFunction | TTime | "all" | "allow-discrete" | "none" | "normal" | (NonNullableString);
 
-  type StepTimingFunction = "step-end" | "step-start" | (string & {});
+  type StepTimingFunction = "step-end" | "step-start" | (NonNullableString);
 
   type TimelineRangeName = "contain" | "cover" | "entry" | "entry-crossing" | "exit" | "exit-crossing";
 
-  type TrackBreadth<TLength> = TLength | "auto" | "max-content" | "min-content" | (string & {});
+  type TrackBreadth<TLength> = TLength | "auto" | "max-content" | "min-content" | (NonNullableString);
 
-  type ViewportLength<TLength> = TLength | "auto" | (string & {});
+  type ViewportLength<TLength> = TLength | "auto" | (NonNullableString);
 
   type VisualBox = "border-box" | "content-box" | "padding-box";
 }
